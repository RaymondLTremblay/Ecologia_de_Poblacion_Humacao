{
    "collab_server" : "",
    "contents" : "---\ntitle: \"A whole-systems approach to population ecology\"\nauthor: \"NRES 470/670\"\ndate: \"Jan 19, 2017\"\noutput: \n  html_document: \n    theme: spacelab\n    toc: yes\n    toc_float: yes\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, cache = TRUE)\n```\n\n![](FoodWeb1.jpg)\n\n## Systems ecology: a way of thinking   \nEcology is messy. When we work in nature, we are dealing with *inherently complex systems*. _All elements in a natural system are connected_, full of dynamic interactions. Interactions among organisms, between organisms and their environment to meet basic needs -- these linkages are what makes ecology messy, but also endlessly fascinating. \n\nWe can think of humans as just another element in these complex systems. And wildlife conservation and mangement is the task of manipulating or tweaking these linkages to meet societal objectives for natural systems.  \n\nThis is not a systems ecology class! \n\nBUT, systems ecology provides a great framework for thinking about natural populations and how to manage them. \n\n## Emergent properties\nThis is one of the most powerful ideas in whole-systems thinking -- when you put many interacting parts together, systems often behave in new and unexpected ways! \n\nTake a classic predator-prey system...\n\n[Insightmaker Lynx-Hare example](https://insightmaker.com/insight/68437/)  \n\nThis is a classic example in population ecology, which we will revisit- but for now it serves as an example of an interacting system that exhibits an emergent property -- regular oscillations!  \n\nAnd here's a more abstract example that illustrates some cool emergent properties.\n\n[Lorenz attractor](https://insightmaker.com/insight/1829/Lorenz-Attractor)\n\n## InsightMaker: a modeling framework for systems thinking!\n\n[InsightMaker](insightmaker.com) is a flexible web-based software for defining interacting systems and for modeling the behavior of these systems. \n\nBoth of the above examples were made in InsightMaker.\n\nWe will make extensive use of InsightMaker, both in class and in lab- this will give you a chance to play around with complex systems without needing a background in computer programming!\n\n## Computer programming and systems thinking\n\nModern computers have reduced or eliminated many of the barriers to understanding how complex systems behave, and as a result computational algorithms are a critical component to modern whole-systems analysis, including **ecosystems** analyses. Armed with basic facility with computer programming, ecologists and natural resource professionals can formalize their understanding of the natural systems in which they work, accounting for complex biological realities that may have been ignored if these tools were not available.  **In this course, we will learn to harness the power of computer programming for understanding and managing natural populations**.  \n\nBy the end of this course, students will have the ability to program their own whole-systems models in InsightMaker, and use specialized software for parameterizing these models (e.g., Program MARK, various **R** packages)\n\n**The course motto**: *Get messy*! This might sound funny for a computer-based class. But just as ecological systems are complex and messy, models sometimes get messy. \nDon't be afraid to model messy systems. And above all, don't be afraid to be wrong- that attitude is the enemy of successful computer programming, and therefore the enemy of good wildlife management! When we build our own algorithms, we can be entering uncharted territory. And this can be difficult and dangerous, but ultimately rewarding! \n\nOf course, getting messy means not just reading and listening to lectures, it means *learning by doing*! Instructor-led lectures will be kept short, and we will spend significant class time and lab time on our computers, working through problems.\n\n\n\n## In-class Exercise: InsightMaker\n\nA [Stock] of stuff increases over time via what [Flows In]. Imagine our stock represents Moose! [Moose Births] would then be [Flows In] to the population of [Moose] over time. Remember the \"over time\" part as it's very important.\n\nA [Stock] of stuff decreases over time via what [Flows Out]. For example, [Moose Deaths] could represent [Flows Out] of the population of [Moose].\n\nIf the [Flows In] is larger than the [Flows Out] then the [Stock] increases over time. \n\nIf the [Flows Out] is larger than the [Flows In] then the [Stock] decreases over time.\n\nIf the [Flows Out] equals the [Flows In] then the exact content of the [Stock] changes over time _though the amount doesn't_.\n\nThe important takeaway is that a [Stock] represents a quantity of something. The [Stock] only changes over time via [Flows In] or [Flows Out]. A [Stock] doesn't change instantaneously, with hand waving, magic, or smoke and mirrors.\n\n1. Open up [InsightMaker](https://insightmaker.com/). If you have never used it before you need to sign up first with a username and password. *InsightMaker is free!*\n2. Create a new Insight (the button to do this should be obvious!) and clear the demo model. \n3. Right click in the center of the screen and select [Create Stock] from the popup. Notice that the name is [New Stock] and is selected. Type in a name for what this is an accumulation of. Note the [Configuration Panel] on the right is now for a [Stock]. \n4. Select [Flow] in the upper left corner of your screen under [Connections]. Now notice that when you mouse over the [Stock] a small right-arrow displays. Click on the right-arrow and drag a couple inches to the left of the [Stock] and release. This is how you create a [Flow] out of a [Stock]. To create a [Flow] into a [Stock] click the [Reverse] button in the [Connections] menu. Please do that now. You can name the [Flow] as you wish. Also in the [Configuration Panel] set [Flow Rate] = 1.\n5. Now click [Run Simulation] and you have just finished your first simulation model.\n6. Can you figure out how to change the settings to run the model for 50 years? Try this and click [Run Simulation].\n7. Use the same methods as *step 4* to create a [Flow Out], representing moose deaths. Re-run the model. Is the population increasing or declining? Why? \n8. Take a few minutes to check out \"insights\" made by others using the \"explore insights\" link at the top of the webpage. You can search the database of insights. We can (and will) add to this database as part of this class!\n9. Change the [Configuration Panel] for the [Stock] and for the [Flow In] and [Flow Out] so that \"Show Value Slider\" is set to \"Yes\"  \n\n\nFinally, just for fun, here is a cool video of the Lorenz Attractor, which we saw earlier!\n\n[Lorenz attractor video!](https://www.youtube.com/watch?v=iu4RdmBVdps)\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1484871182805.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1697806762",
    "id" : "1BD278AF",
    "lastKnownWriteTime" : 1485135789,
    "last_content_update" : 1485135789761,
    "path" : "E:/GIT/NRES-470/LECTURE1.Rmd",
    "project_path" : "LECTURE1.Rmd",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}