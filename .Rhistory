damped <- function(x){
y <- r*N* (1 - N(x))
return(y)
}
p + stat_function(fun = damped, n = 500)
y <- r*N* (1 - lag(N(x)))
damped <- function(x){
y <- r*N* (1 - lag(N(x)))
return(y)
}
p + stat_function(fun = damped, n = 500)
p + stat_function(fun = damped, n = 50)
p + stat_function(fun = damped, n = 50)
p <- ggplot(data = data.frame(x = c(-4, 10)), aes(x))
r=0.1
N=10
damped <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
p + stat_function(fun = damped, n = 50)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
t <- seq(1,100,1) N0 <- 100
t <- seq(1,100,1)
N0 <- 100
r <- 0.4
K <- 1000
tau <- 0
rtau <- r*tau
N <- seq(0,length(t),1) N[1]<-N0
t <- seq(1,100,1)
N0 <- 100
r <- 0.4
K <- 1000
tau <- 0
rtau <- r*tau
N <- seq(0,length(t),1)
N[1]<-N0
lambda <- exp(r)
for(ts in t){
etau <- tau
if(ts <= tau) etau <- 0
N[ts+1] <- lambda*N[ts]/(1+((N[ts-
etau]*(lambda-1))/K)) }
install.packages("stagePop")
knitr::opts_chunk$set(echo = TRUE)
library(stagepop)
library(stagePop)
runStagePopExample('BlowFlies')
runStagePopExample(VarDurEnv.R)
VarDurEnv.R
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver=’deSolve’, atol=1e-3, rtol=1e-3,
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver=deSolve, atol=1e-3, rtol=1e-3,
hbsize=1e4)
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies[’adults’,1] *
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies['adults',1] *
exp(-x$blowflies[’adults’,1]/A0)
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies['adults',1] *
exp(-x$blowflies['adults',1]/A0)
return(reprod)
},
deathFunc=function(stage,x,time,species,strain){
#per capita death rate (/d)
a=c(0.07,0.004,0.003,0.0025,0.27)
return(a[stage])
},
durationFunc=function(stage,x,time,species,strain){
#duration of each stage in days
a=c(0.6,5.0,5.9,4.1)
return(a[stage])
},
immigrationFunc=function(stage,x,time,species,strain){
v=0
if (stage==5){
if (time>=0 & time<=1){v=100}
}
return(v)
},
emigrationFunc=function(stage,x,time,species,strain){return(0)}
)
modelOutput = popModel(
numSpecies=1,
numStages=5,
ICs=list(matrix(0,nrow=5,ncol=1)),
timeVec=seq(0,200,0.5),
timeDependLoss=TRUE,
timeDependDuration=FALSE,
rateFunctions=blowFliesFunctions,
solverOptions=solver.options,
stageNames=list(c(’eggs’,’larvae’,’pupae’,’juveniles’,’adults’)),
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies['adults',1] *
exp(-x$blowflies['adults',1]/A0)
return(reprod)
},
deathFunc=function(stage,x,time,species,strain){
#per capita death rate (/d)
a=c(0.07,0.004,0.003,0.0025,0.27)
return(a[stage])
},
durationFunc=function(stage,x,time,species,strain){
#duration of each stage in days
a=c(0.6,5.0,5.9,4.1)
return(a[stage])
},
immigrationFunc=function(stage,x,time,species,strain){
v=0
if (stage==5){
if (time>=0 & time<=1){v=100}
}
return(v)
},
emigrationFunc=function(stage,x,time,species,strain){return(0)}
)
modelOutput = popModel(
numSpecies=1,
numStages=5,
ICs=list(matrix(0,nrow=5,ncol=1)),
timeVec=seq(0,200,0.5),
timeDependLoss=TRUE,
timeDependDuration=FALSE,
rateFunctions=blowFliesFunctions,
solverOptions=solver.options,
stageNames=list(c('eggs','larvae','pupae','juveniles','adults)),
speciesNames=c('blowflies'),
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies['adults',1] *
exp(-x$blowflies['adults',1]/A0)
return(reprod)
},
deathFunc=function(stage,x,time,species,strain){
#per capita death rate (/d)
a=c(0.07,0.004,0.003,0.0025,0.27)
return(a[stage])
},
durationFunc=function(stage,x,time,species,strain){
#duration of each stage in days
a=c(0.6,5.0,5.9,4.1)
return(a[stage])
},
immigrationFunc=function(stage,x,time,species,strain){
v=0
if (stage==5){
if (time>=0 & time<=1){v=100}
}
return(v)
},
emigrationFunc=function(stage,x,time,species,strain){return(0)}
)
modelOutput = popModel(
numSpecies=1,
numStages=5,
ICs=list(matrix(0,nrow=5,ncol=1)),
timeVec=seq(0,200,0.5),
timeDependLoss=TRUE,
timeDependDuration=FALSE,
rateFunctions=blowFliesFunctions,
solverOptions=solver.options,
stageNames=list(c('eggs','larvae','pupae','juveniles','adults')),
speciesNames=c('blowflies'),
saveFig=TRUE,
figType='eps',
figName='blowflies'
)
install.packages("xaringan")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
lifetable <- read.csv("life_table.csv")
knitr::kable(lifetable,caption="",col.names = c("x","S(x)","b(x)","l(x)","g(x)"))
LT=tribble(
~Age, ~ N(x), ~l(x), ~b(x), ~lxbx, ~mortality_rate_m(x), ~Survival_rate_S(x), ~Death_rate
)
library(tidyverse)
library(tidyverse)
LT=tribble(
~Age, ~ N(x), ~l(x), ~b(x), ~lxbx, ~mortality_rate_m(x), ~Survival_rate_S(x), ~Death_rate
)
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x
)
LT
library(tidyverse)
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24
)
LT
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "", 0.76, 2, "", 0.3, .70, .23,
)
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "", 0.76, 2, "", 0.3, .70, .23
)
LT
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "", 0.76, 2, "", 0.3, 0.70, 0.23
)
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, , 0.76, 2, "", 0.3, 0.70, 0.23
)
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, , 0.76, 2, , 0.3, 0.70, 0.23
)
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1,- , 0.76, 2, -, 0.3, 0.70, 0.23
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1,"-" , 0.76, 2, "-", 0.3, 0.70, 0.23
)
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "-", 0.24,
1,"-" , 0.76, 2, "-", 0.3, 0.70, 0.23
)
LT
LT=tribble(
~Age, ~ N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1,"" , 0.76, 2, "", 0.3, 0.70, 0.23
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1,"" , 0.76, 2, "", 0.3, 0.70, 0.23
)
""
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "" , 0.76, 2, "", 0.3, 0.70, 0.23
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1,
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1,1,1,1,1,1,1
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1,1,1,1,1,1,1,1
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1,1,1,1,1,1,1,1,1
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, 1,   1, 1,  1, 1,  1, 1
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~Survival_rate_S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, 1,   1, 1,  1, 1,  1, 1
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~mortality_rate_m_x, ~S_x, ~Death_rate_d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, 1,   1, 1,  1, 1,  1, 1
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, 1,   1, 1,  1, 1,  1, 1
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
0, 956, 1, 0, 0, 0.24, "", 0.24
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, 956, 1, 0, 0, 0.24, "", 0.24
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "", 1, 0, 0, 0.24, "", 0.24
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "-", 1, 0, 0, 0.24, "", 0.24
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "?", 1, 0, 0, 0.24, "", 0.24
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, ?, 1, 0, 0, 0.24, "", 0.24
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "?", 1, 0, 0, 0.24, "", 0.24
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "?", 1, 0, 0, 0.24, "", 0.24
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, "NA", 1, 0, 0, 0.24, "", 0.24
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, "", 0.24,
1, NA, 1, 0, 0, 0.24, "", 0.24
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 1, 0, 0, 0.24, "", 0.24
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,n/a, n/a, n/a
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,-, -, -
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,"-", "-", "-"
)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,No, No, No
)
LT
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT
LT %>%
gt()
library(gt)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT %>%
gt()
knitr::opts_chunk$set(echo = TRUE)
library(stagePop)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#########
# Teasel example from Gotelli: summarizing a complex life history!
teasel <- read.csv("teaselmatrix1.csv", header=T)      # read in the teasel transition matrix from Gotelli
teasel <- teasel[,-1]                                  # remove the row names
teasel_matrix <- as.matrix(teasel)                     # convert to a matrix (from a data frame)
colnames(teasel_matrix) <- names(teasel)               # assign row and column names
rownames(teasel_matrix) <- names(teasel)
teasel_matrix                                          # print the matrix
#############
# Summarize initial age-structured abundance as a matrix with one column
Initial_teasel <- matrix(c(1000,1500,200,300,600,25),ncol=1)         # initial population size (population vector; matrix with 1 column!)
rownames(Initial_teasel) <- rownames(teasel_matrix)                  # add row and column names
colnames(Initial_teasel) <- "Abundance"
Initial_teasel
