############
# Visualización gráfica
PlotCloud <- function(simdata){
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
# Visualice las tasas de extinción a lo largo del tiempo
Extinction_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))/ncol(simdata)
}
plot(c(1:101),Extinction_byyear(Default),type="l",lwd=2,xlab="year",ylab="extinction risk")
abline(h=0.05,col="red",lwd=2)
# visualizar la abundancia final después de 100 años en relación con la abundancia inicial
hist(Default[nrow(Default),],xlab="Final abundance after 100 years",ylab="Number of replicates",main="")
abline(v=Init_N,col="green",lwd=2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
############################################################
####                                                    ####
####  BIOL4558, Lecture 12                              ####
####                                                    ####
#### Raymond L. Tremblay                                ####
####  Universidad de Puerto Rico                        ####
####                                                    ####
############################################################
############################################################
####  Análisis de viabilidad poblacional                ####
############################################################
#install.packages(c('tinytex', dependencies=T))
##############
# Demostración PVA
##############
# PASO 1: conceptualice la historia de vida (estamos modelando esta población como un modelo estocástico simple de una etapa con dependencia de la densidad)
# PASO 2: parametrizar el modelo
####
# Parámetros básicos de la historia de vida
####
R_max <- 1.15       # Tasa máxima de crecimiento
Init_N <- 500        # Abundancia inicial
K <- 175            # Capacidad de carga
####
# Estocasticidad ambiental
####
SD_anngrowth <- 0.11  # desviación estándar de la tasa de crecimiento anual
####
# Densidad-dependencia (modelo de Ricker)
####
Ricker <- function(prev_abund){       # esta es una función para calcular la abundancia del próximo año - incluye estocasticidad env
prev_abund * exp(log(rnorm(1,R_max,SD_anngrowth))*(1-(prev_abund/K)))
}
####
# Catástrofe
####
Flood_prob <- 0.05      # 5% probabilidad de una gran inundación
Flood_lambda <- 0.25    # 25% de la población puede sobrevivir a una inundación
#remotes::install_github('yihui/tinytex')
# PASO 3: agregue estructura espacial (no se aplica aquí)
# PASO 4: ¡simular!
####
# Parámetros de simulación básicos
####
nyears <- 100     # número de años
nreps <- 500      # número de réplicas
PVAdemo <- function(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))   # configurar matriz de almacenamiento
## empezar a recorrer las réplicas
for(rep in 1:nreps){
# establecer abundancia inicial
PopArray2[1,rep] <- Init_N     # establecer la abundancia inicial
### recorrer años: loop through years
for(y in 2:(nyears+1)){
### estocasticidad y d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catástrofe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
### Run the PVA!
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
# PASO 5: resultados
############
# Visualización gráfica
PlotCloud <- function(simdata){
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
# Visualice las tasas de extinción a lo largo del tiempo
Extinction_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))/ncol(simdata)
}
plot(c(1:101),Extinction_byyear(Default),type="l",lwd=2,xlab="year",ylab="extinction risk")
abline(h=0.05,col="red",lwd=2)
# visualizar la abundancia final después de 100 años en relación con la abundancia inicial
hist(Default[nrow(Default),],xlab="Final abundance after 100 years",ylab="Number of replicates",main="")
abline(v=Init_N,col="green",lwd=2)
# plot probabilities of different severities of declinegraficar las probabilidades de diferentes grados de declive
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(Default),]<(Init_N-(declines[s]/100)*Init_N)))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline threshold (percent)",ylab="Probability of falling below threshold")
abline(v=25,col="red",lwd=2)
# Grafique el riesgo de extinción en función de la gravedad de las inundaciones
Exctinction_risk <- function(simdata){
length(which(simdata[nrow(simdata),]==0))/ncol(simdata)
}
flood_lambdas <- seq(0.9,0.1,by=-0.05)
all_scenarios <- numeric(length(flood_lambdas))
for(scenario in 1:length(flood_lambdas)){
PVA <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,flood_lambdas[scenario])
all_scenarios[scenario] <- Exctinction_risk(PVA)
}
plot(flood_lambdas,all_scenarios,type="p",cex=2,xlab="flood impact (lambda in flood year)",ylab="extinction risk")
abline(h=0.05,col="red",lwd=2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
############################################################
####                                                    ####
####  BIOL4558, Lecture 12                              ####
####                                                    ####
#### Raymond L. Tremblay                                ####
####  Universidad de Puerto Rico                        ####
####                                                    ####
############################################################
############################################################
####  Análisis de viabilidad poblacional                ####
############################################################
#install.packages(c('tinytex', dependencies=T))
##############
# Demostración PVA
##############
# PASO 1: conceptualice la historia de vida (estamos modelando esta población como un modelo estocástico simple de una etapa con dependencia de la densidad)
# PASO 2: parametrizar el modelo
####
# Parámetros básicos de la historia de vida
####
R_max <- 1.15       # Tasa máxima de crecimiento
Init_N <- 500        # Abundancia inicial
K <- 500            # Capacidad de carga
####
# Estocasticidad ambiental
####
SD_anngrowth <- 0.11  # desviación estándar de la tasa de crecimiento anual
####
# Densidad-dependencia (modelo de Ricker)
####
Ricker <- function(prev_abund){       # esta es una función para calcular la abundancia del próximo año - incluye estocasticidad env
prev_abund * exp(log(rnorm(1,R_max,SD_anngrowth))*(1-(prev_abund/K)))
}
####
# Catástrofe
####
Flood_prob <- 0.05      # 5% probabilidad de una gran inundación
Flood_lambda <- 0.25    # 25% de la población puede sobrevivir a una inundación
#remotes::install_github('yihui/tinytex')
# PASO 3: agregue estructura espacial (no se aplica aquí)
# PASO 4: ¡simular!
####
# Parámetros de simulación básicos
####
nyears <- 100     # número de años
nreps <- 500      # número de réplicas
PVAdemo <- function(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))   # configurar matriz de almacenamiento
## empezar a recorrer las réplicas
for(rep in 1:nreps){
# establecer abundancia inicial
PopArray2[1,rep] <- Init_N     # establecer la abundancia inicial
### recorrer años: loop through years
for(y in 2:(nyears+1)){
### estocasticidad y d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catástrofe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
### Run the PVA!
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
# PASO 5: resultados
############
# Visualización gráfica
PlotCloud <- function(simdata){
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
# Visualice las tasas de extinción a lo largo del tiempo
Extinction_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))/ncol(simdata)
}
plot(c(1:101),Extinction_byyear(Default),type="l",lwd=2,xlab="year",ylab="extinction risk")
abline(h=0.05,col="red",lwd=2)
# visualizar la abundancia final después de 100 años en relación con la abundancia inicial
hist(Default[nrow(Default),],xlab="Final abundance after 100 years",ylab="Number of replicates",main="")
abline(v=Init_N,col="green",lwd=2)
# plot probabilities of different severities of declinegraficar las probabilidades de diferentes grados de declive
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(Default),]<(Init_N-(declines[s]/100)*Init_N)))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline threshold (percent)",ylab="Probability of falling below threshold")
abline(v=25,col="red",lwd=2)
# Grafique el riesgo de extinción en función de la gravedad de las inundaciones
Exctinction_risk <- function(simdata){
length(which(simdata[nrow(simdata),]==0))/ncol(simdata)
}
flood_lambdas <- seq(0.9,0.1,by=-0.05)
all_scenarios <- numeric(length(flood_lambdas))
for(scenario in 1:length(flood_lambdas)){
PVA <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,flood_lambdas[scenario])
all_scenarios[scenario] <- Exctinction_risk(PVA)
}
plot(flood_lambdas,all_scenarios,type="p",cex=2,xlab="flood impact (lambda in flood year)",ylab="extinction risk")
abline(h=0.05,col="red",lwd=2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
pe=.15
pe=.15
1-pe
(1-pe)^2
1-(1-pe)^2
1-(1-pe)^10
1-((1-pe)^10)
.8*.8
.8*.8*.8
.8*.8*.8*.8
(1-((1-pe)^10))^4
(1-((1-pe)^10))^100
(1-((1-pe)^10))^10
pe=.15 # probabilidad de extincción en un año
1-pe #  Probabilidad de persistencia
1-((1-pe)^10) # Probabilidad que la metapoblación vaya a la extinción
.8*.8*.8*.8   # Probabilidad de la extinción de la metapoblación si tiene 4 parches
(1-((1-pe)^10))^10 # Probabilidad de la metapoblación si tiene 10 parches
R.version
R.version
install.packages(c("anyflights", "backports", "bayestestR", "BH", "brio", "broom", "car", "carData", "class", "cli", "cmprsk", "conflicted", "conquer", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "datawizard", "DBI", "DescTools", "devtools", "digest", "DT", "dtplyr", "effects", "emmeans", "Exact", "fansi", "fmsb", "forecast", "foreign", "fs", "future", "gert", "ggside", "gld", "glue", "graphlayouts", "htmlTable", "httpuv", "igraph", "insight", "knitr", "labelled", "lmtest", "MASS", "Matrix", "memoise", "multcomp", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parallelly", "parameters", "pkgbuild", "pkgload", "popdemo", "progressr", "questionr", "raster", "rbibutils", "RcppArmadillo", "Rdpack", "readr", "remotes", "rex", "rgdal", "rgeos", "rgl", "rio", "rsample", "servr", "sessioninfo", "shinyjs", "sjmisc", "sjPlot", "sp", "spatial", "stringi", "systemfonts", "terra", "testthat", "tibble", "timetk", "tinytex", "tseries", "TTR", "tzdb", "usethis", "UsingR", "uuid", "vroom", "withr", "xfun", "xml2"))
install.packages(c("anyflights", "backports", "bayestestR", "BH", "brio", "broom", "car", "carData", "class", "cli", "cmprsk", "conflicted", "conquer", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "datawizard", "DBI", "DescTools", "devtools", "digest", "DT", "dtplyr", "effects", "emmeans", "Exact", "fansi", "fmsb", "forecast", "foreign", "fs", "future", "gert", "ggside", "gld", "glue", "graphlayouts", "htmlTable", "httpuv", "igraph", "insight", "knitr", "labelled", "lmtest", "MASS", "Matrix", "memoise", "multcomp", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parallelly", "parameters", "pkgbuild", "pkgload", "popdemo", "progressr", "questionr", "raster", "rbibutils", "RcppArmadillo", "Rdpack", "readr", "remotes", "rex", "rgdal", "rgeos", "rgl", "rio", "rsample", "servr", "sessioninfo", "shinyjs", "sjmisc", "sjPlot", "sp", "spatial", "stringi", "systemfonts", "terra", "testthat", "tibble", "timetk", "tinytex", "tseries", "TTR", "tzdb", "usethis", "UsingR", "uuid", "vroom", "withr", "xfun", "xml2"))
install.packages(c("class", "foreign", "MASS", "nlme", "nnet", "spatial", "systemfonts", "terra"))
install.packages(c("class", "foreign", "MASS", "nlme", "nnet", "spatial", "systemfonts", "terra"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("mra")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
############################################################
####                                                    ####
####  NRES 421, PVA                                     ####
####                                                    ####
####  Kevin Shoemaker                                   ####
####  University of Nevada, Reno                        ####
####                                                    ####
############################################################
############################################################
####  Loggerhead example                                ####
############################################################
##### specify projection matrix!
projection_matrix <- matrix(
c(
0,     0,      0,      4.665,      61.896,
0.675, 0.703,  0,      0,          0,
0,     0.047,  0.657,  0,          0,
0,     0,      0.019,  0.682,      0,
0,     0,      0,      0.061,      0.809
)
,nrow=5,ncol=5,byrow=T
)
stagenames <- c("Hatchling","Small Juv","Large Juv","Subadult","Adult")
rownames(projection_matrix) <- stagenames
colnames(projection_matrix) <- stagenames
projection_matrix
# Run the matrix projection model!
nYears <- 100                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
Abundance_year0 <- c(2000,500,300,300,20)   # vector of initial abundances
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund  # set the year 0 abundance
for(t in 2:(nYears+1)){   # loop through all years
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")  # set up blank plot
cols <- rainbow(5)    # set up colors to use
for(s in 1:5){
points(allYears[s,],col=cols[s],type="l",lwd=2)     # plot out each life stage abundance, one at a time
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))   # label the axis
legend("topright",col=cols,lwd=rep(2,3),legend=rownames(TMat),bty="n")  # put a legend on the plot
Abundance_year0 <- c(2000,500,300,300,20)   # vector of initial abundances
Abundance_year0
# Run the matrix projection model!
nYears <- 100                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund  # set the year 0 abundance
for(t in 2:(nYears+1)){   # loop through all years
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")  # set up blank plot
cols <- rainbow(5)    # set up colors to use
for(s in 1:5){
points(allYears[s,],col=cols[s],type="l",lwd=2)     # plot out each life stage abundance, one at a time
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))   # label the axis
legend("topright",col=cols,lwd=rep(2,3),legend=rownames(TMat),bty="n")  # put a legend on the plot
Year1 <- projection_matrix %*% Abundance_year0  # matrix multiplication!
projection_matrix <- matrix(
c(
0,     1.2,   3.1,
0.4,   0,     0,
0,     0.75,   0
)
,nrow=3,ncol=3,byrow=T
)
projection_matrix
Abundance_year0 <- c(1000,0,0)
Abundance_year0
Year1 <- projection_matrix %*% Abundance_year0  # matrix multiplication!
Year1
Year2 <- projection_matrix %*% Year1  # matrix multiplication!
Year2
nYears <- 20                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund  # set the year 0 abundance
for(t in 2:(nYears+1)){   # loop through all years
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")  # set up blank plot
cols <- rainbow(3)    # set up colors to use
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)     # plot out each life stage abundance, one at a time
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))   # label the axis
legend("topleft",col=cols,lwd=rep(2,3),legend=paste("Stage ",seq(1:nrow(TMat))))  # put a legend on the plot
# Run the matrix projection model!
nYears <- 100                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
Abundance_year0 <- c(2000,500,300,300,20)   # vector of initial abundances
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund  # set the year 0 abundance
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
############################################################
####                                                    ####
####  NRES 421, PVA                                     ####
####                                                    ####
####  Kevin Shoemaker                                   ####
####  University of Nevada, Reno                        ####
####                                                    ####
############################################################
############################################################
####  Loggerhead example                                ####
############################################################
##### specify projection matrix!
projection_matrix <- matrix(
c(
0,     0,      0,      4.665,      61.896,
0.675, 0.703,  0,      0,          0,
0,     0.047,  0.657,  0,          0,
0,     0,      0.019,  0.682,      0,
0,     0,      0,      0.061,      0.809
)
,nrow=5,ncol=5,byrow=T
)
stagenames <- c("Hatchling","Small Juv","Large Juv","Subadult","Adult")
rownames(projection_matrix) <- stagenames
colnames(projection_matrix) <- stagenames
projection_matrix
# Run the matrix projection model!
nYears <- 100                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
Abundance_year0 <- c(2000,500,300,300,20)   # vector of initial abundances
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund  # set the year 0 abundance
for(t in 2:(nYears+1)){   # loop through all years
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")  # set up blank plot
cols <- rainbow(5)    # set up colors to use
for(s in 1:5){
points(allYears[s,],col=cols[s],type="l",lwd=2)     # plot out each life stage abundance, one at a time
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))   # label the axis
legend("topright",col=cols,lwd=rep(2,3),legend=rownames(TMat),bty="n")  # put a legend on the plot
Abundance_year0 <- c(2000,500,300,300,20)   # vector of initial abundances
Abundance_year0
# Run the matrix projection model!
nYears <- 100                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund  # set the year 0 abundance
for(t in 2:(nYears+1)){   # loop through all years
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")  # set up blank plot
cols <- rainbow(5)    # set up colors to use
for(s in 1:5){
points(allYears[s,],col=cols[s],type="l",lwd=2)     # plot out each life stage abundance, one at a time
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))   # label the axis
legend("topright",col=cols,lwd=rep(2,3),legend=rownames(TMat),bty="n")  # put a legend on the plot
Year1 <- projection_matrix %*% Abundance_year0  # matrix multiplication!
projection_matrix <- matrix(
c(
0,     1.2,   3.1,
0.4,   0,     0,
0,     0.75,   0
)
,nrow=3,ncol=3,byrow=T
)
projection_matrix
Abundance_year0 <- c(1000,0,0)
Abundance_year0
Year1 <- projection_matrix %*% Abundance_year0  # matrix multiplication!
Year1
Year2 <- projection_matrix %*% Year1  # matrix multiplication!
Year2
nYears <- 20                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund  # set the year 0 abundance
for(t in 2:(nYears+1)){   # loop through all years
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")  # set up blank plot
cols <- rainbow(3)    # set up colors to use
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)     # plot out each life stage abundance, one at a time
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))   # label the axis
legend("topleft",col=cols,lwd=rep(2,3),legend=paste("Stage ",seq(1:nrow(TMat))))  # put a legend on the plot
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
library(kableExtra)
kbl(courseSchedule,caption = "")
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
library(kableExtra)
kbl(courseSchedule,caption = "")
tinytex::install_tinytex()
R.version
install.packages(c("nlme", "rgl", "survival", "xfun"))
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
knitr::include_graphics(figures/malthus1.jpg)
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
install.packages("mra")
install.packages("marked")
install.packages("popbio")
install.packages("deSolve")
install.packages(c("Hmisc", "rbibutils", "reprex", "rgl", "rmarkdown", "TMB"))
install.packages(c("Hmisc", "rbibutils", "reprex", "rgl", "rmarkdown", "TMB"))
install.packages(c("Hmisc", "rbibutils", "reprex", "rgl", "rmarkdown", "TMB"))
install.packages(c("Hmisc", "rbibutils", "reprex", "rgl", "rmarkdown", "TMB"))
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
load("/Users/raymondtremblay/Dropbox/GitHub_Dropbox_Drive/GitHub/Ecologia_de_Poblacion_Humacao/installed_old.rda")
R.version
R.version
install.packages(c("Hmisc", "MASS", "nlme", "rbibutils", "rgl", "survival", "TMB", "tweenr"))
