install.packages("roxygen2")
library(roxygen2)
rmarkdown::render_site
rmarkdown::render_site()
rmarkdown::render('index.Rmd', 'pdf_document')
rmarkdown::render('index.Rmd', 'word_document')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
rmarkdown::render('index.Rmd', 'word_document')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
rmarkdown::render('index.Rmd', 'word_document')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
rmarkdown::render('index.Rmd', 'word_document')
rmarkdown::render('index.Rmd', 'word_document')
rmarkdown::render('schedule.Rmd', 'word_document')
rmarkdown::render('index.Rmd', 'word_document')
rmarkdown::render('index.Rmd', 'word_document')
80*5
rmarkdown::render('index.Rmd', 'word_document')
rmarkdown::render('index.Rmd', 'word_document')
4860/15
324*3
972/4
243*5
40/3
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
rmarkdown::render('LAB1.Rmd', 'word_document')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
Density <- seq(0,500,1)  # create a sequence of numbers from 0 to 500, representing a range of population densities
b_max <- 0.9  # maximum reproduction (at low densities)
d_min <- 0.1  # minimum mortality
a <- 0.001    # D-D terms
c <- 0.001
b <- b_max + a*Density
d <- d_min + c*Density
plot(Density,b,type="l",col="green",lwd=2)
points(Density,d,type="l",col="red",lwd=2)
plot(Density,b,type="l",col="green",lwd=2)
points(Density,d,type="l",col="red",lwd=2)
Density <- seq(0,500,1)  # create a sequence of numbers from 0 to 500, representing a range of population densities
b_max <- 0.  # maximum reproduction (at low densities)
b_max <- 0.8  # maximum reproduction (at low densities)
d_min <- 0.1  # minimum mortality
a <- 0.001    # D-D terms
c <- 0.0005
b <- b_max - a*Density
d <- d_min + c*Density
plot(Density,b,type="l",col="green",lwd=2)
plot(Density,b,type="l",col="green",lwd=2)
points(Density,d,type="l",col="red",lwd=2)
plot(Density,b,type="l",col="green",lwd=2,ylab=c(0,1))
plot(Density,b,type="l",col="green",lwd=2,ylab=c(0,1))
points(Density,d,type="l",col="red",lwd=2)
b_max <- 0.8  # maximum reproduction (at low densities)
d_min <- 0.3  # minimum mortality
a <- 0.001    # D-D terms
c <- 0.0005
b <- b_max - a*Density
d <- d_min + c*Density
plot(Density,b,type="l",col="green",lwd=2,ylab=c(0,1))
points(Density,d,type="l",col="red",lwd=2)
plot(Density,b,type="l",col="green",lwd=2,yim=c(0,1))
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,1))
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,1))
points(Density,d,type="l",col="red",lwd=2)
legend("bottomleft",col=c("green","red"),legend=c("per-capita birth rate","per-capita mortality"))
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,1))
points(Density,d,type="l",col="red",lwd=2)
legend("bottomleft",col=c("green","red"),legend=c("per-capita birth rate","per-capita mortality"),bty="n")
Density <- seq(0,500,1)  # create a sequence of numbers from 0 to 500, representing a range of population densities
## CONSTANTS
b_max <- 0.8  # maximum reproduction (at low densities)
d_min <- 0.3  # minimum mortality
a <- 0.001    # D-D terms
c <- 0.0005
b <- b_max - a*Density
d <- d_min + c*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,1))
points(Density,d,type="l",col="red",lwd=2)
legend("bottomleft",col=c("green","red"),lty=c(1,1),legend=c("per-capita birth rate","per-capita mortality"),bty="n")
Density <- seq(0,500,1)  # create a sequence of numbers from 0 to 500, representing a range of population densities
## CONSTANTS
b_max <- 0.8  # maximum reproduction (at low densities)
d_min <- 0.3  # minimum mortality
a <- 0.001    # D-D terms
c <- 0.0005
b <- b_max - a*Density
d <- d_min + c*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,1),main="Density-Dependence!")
points(Density,d,type="l",col="red",lwd=2)
legend("bottomleft",col=c("green","red"),lty=c(1,1),legend=c("per-capita birth rate","per-capita mortality"),bty="n")
log(1)
log(1.1)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
Density <- seq(0,10000,1)  # create a sequence of numbers from 0 to 500, representing a range of population densities
b_max <- 100  # maximum reproduction (at low densities)
d_min <- 0.4  # minimum mortality
a <- 0.001    # D-D terms
c <- 0.0001
b <- b_max - a*Density
d <- d_min + c*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,1),main="Density-Dependence!")
a <- 0.01    # D-D terms
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,1),main="Density-Dependence!")
b <- b_max - a*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,1),main="Density-Dependence!")
b_max <- 50  # maximum reproduction (at low densities)
d_min <- 0.4  # minimum mortality
a <- 0.01    # D-D terms
b <- b_max - a*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,2),main="Density-Dependence!")
b_max <- 5  # maximum reproduction (at low densities)
d_min <- 0.4  # minimum mortality
a <- 0.001    # D-D terms
c <- 0.0001
b <- b_max - a*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,2),main="Density-Dependence!")
b_max <- 1  # maximum reproduction (at low densities)
d_min <- 0.4  # minimum mortality
a <- 0.001    # D-D terms
c <- 0.0001
b <- b_max - a*Density
d <- d_min + c*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,2),main="Density-Dependence!")
a <- 0.0005    # D-D terms
b <- b_max - a*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,2),main="Density-Dependence!")
a <- 0.00005    # D-D terms
b <- b_max - a*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,2),main="Density-Dependence!")
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,2),main="Density-Dependence!")
points(Density,d,type="l",col="red",lwd=2)
c <- 0.00001
d <- d_min + c*Density
plot(Density,b,type="l",col="green",lwd=2,ylim=c(0,2),main="Density-Dependence!")
points(Density,d,type="l",col="red",lwd=2)
10000/4
(10000/4)*.6
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
rmarkdown::render('LAB2.Rmd', 'word_document')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
Elephant_age <- seq(0,50)
Birth_rate <- c(rep(0,times=12),seq(0,0.3,length=8),rep(0.3,times=30),seq(0.3,0,length=10))
names(Birth_rate) <- Elephant_age
barplot(Birth_rate)
?barplot
barplot(Birth_rate)
Birth_rate
Elephant_age <- seq(1,60)
Birth_rate <- c(rep(0,times=12),seq(0,0.3,length=8),rep(0.3,times=30),seq(0.3,0,length=10))
names(Birth_rate) <- Elephant_age
barplot(Birth_rate)
barplot(Birth_rate,xlab="Age",ylab="b, per-capita birth rate")
barplot(Birth_rate,xlab="Age",ylab="b, per-capita birth rate",col="blue")
barplot(Birth_rate,xlab="Age",ylab="b, per-capita birth rate")
Elephant_age <- seq(0,60,by=2)
Elephant_age <- seq(0,60,by=2)
Birth_rate <- c(rep(0,times=7),seq(0,0.3,length=4),rep(0.3,times=15),seq(0.3,0,length=5))
names(Birth_rate) <- Elephant_age
Birth_rate
barplot(Birth_rate,xlab="Age",ylab="b, per-capita birth rate")
barplot(Birth_rate,xlab="Age",ylab="b, per-capita birth rate",col="blue")
Tortoise_age <- seq(0,120,by=5)
Death_rate <- c(seq(0.7,0.05,length=4),seq(0.05,0.05,length=16),seq(0.05,0.5,length=4))
Death_rate <- c(seq(0.7,0.05,length=4),seq(0.05,0.05,length=16),seq(0.05,0.5,length=4))
names(Death_rate) <- Tortoise_age
Death_rate <- c(seq(0.7,0.05,length=5),seq(0.05,0.05,length=16),seq(0.05,0.5,length=4))
names(Death_rate) <- Tortoise_age
barplot(Death_rate,xlab="Age",ylab="b, per-capita death rate",col="blue")
courseSchedule <- read.csv("life_table.csv")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
projection_matrix <- matrix(
c(
0,     0.5,   1.1,
0.3,   0,     0,
0,     0.75,   0
)
,nrow=3,ncol=3,byrow=T
)
projection_matrix
Abundance_year0 <- c(1000,0,0)
Abundance_year0
Year1 <- projection_matrix %*% Abundance_year0  # matrix multiplication!
Year1
Year2 <- projection_matrix %*% Year1  # matrix multiplication!
Year2
nYears <- 20                                            # set the number of years to project
TMat <- projection_matrix
InitAbund <- Abundance_year0
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund
for(t in 2:(nYears+1)){
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,50),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")
cols <- rainbow(3)
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))
legend("topleft",col=cols,lwd=rep(2,3),legend=paste("Stage ",seq(1:nrow(TMat))))
nYears <- 20                                            # set the number of years to project
TMat <- projection_matrix
InitAbund <- Abundance_year0
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund
for(t in 2:(nYears+1)){
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(Allyears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")
nYears <- 20                                            # set the number of years to project
TMat <- projection_matrix
InitAbund <- Abundance_year0
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund
for(t in 2:(nYears+1)){
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")
cols <- rainbow(3)
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))
legend("topleft",col=cols,lwd=rep(2,3),legend=paste("Stage ",seq(1:nrow(TMat))))
projection_matrix <- matrix(
c(
0,     0.5,   2.1,
0.3,   0,     0,
0,     0.75,   0
)
,nrow=3,ncol=3,byrow=T
)
projection_matrix
Abundance_year0 <- c(1000,0,0)
Abundance_year0
Year1 <- projection_matrix %*% Abundance_year0  # matrix multiplication!
Year1
Year2 <- projection_matrix %*% Year1  # matrix multiplication!
Year2
nYears <- 20                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund
for(t in 2:(nYears+1)){
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")
cols <- rainbow(3)
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))
legend("topleft",col=cols,lwd=rep(2,3),legend=paste("Stage ",seq(1:nrow(TMat))))
projection_matrix
projection_matrix <- matrix(
c(
0,     0.5,   2.5,
0.4,   0,     0,
0,     0.75,   0
)
,nrow=3,ncol=3,byrow=T
)
projection_matrix
nYears <- 20                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund
for(t in 2:(nYears+1)){
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")
cols <- rainbow(3)
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))
legend("topleft",col=cols,lwd=rep(2,3),legend=paste("Stage ",seq(1:nrow(TMat))))
nYears <- 50                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund
for(t in 2:(nYears+1)){
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")
cols <- rainbow(3)
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))
legend("topleft",col=cols,lwd=rep(2,3),legend=paste("Stage ",seq(1:nrow(TMat))))
projection_matrix <- matrix(
c(
0,     1.2,   3.1,
0.4,   0,     0,
0,     0.75,   0
)
,nrow=3,ncol=3,byrow=T
)
projection_matrix
nYears <- 50                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund
for(t in 2:(nYears+1)){
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")
cols <- rainbow(3)
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))
legend("topleft",col=cols,lwd=rep(2,3),legend=paste("Stage ",seq(1:nrow(TMat))))
nYears <- 20                                            # set the number of years to project
TMat <- projection_matrix                               # define the projection matrix
InitAbund <- Abundance_year0                            # define the initial abundance
## NOTE: the code below can be re-used without modification:
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)     # build a storage array for all abundances!
allYears[,1] <- InitAbund
for(t in 2:(nYears+1)){
allYears[,t] <-  TMat %*% allYears[,t-1]
}
plot(1,1,pch="",ylim=c(0,max(allYears)),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")
cols <- rainbow(3)
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))
legend("topleft",col=cols,lwd=rep(2,3),legend=paste("Stage ",seq(1:nrow(TMat))))
library(popbio)
lambda(projection_matrix)
library(popbio)
lambda(projection_matrix)
stable.stage(projection_matrix)
install.packages("popbio")
install.packages("popbio")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
lifetable <- read.csv("life_table4.csv")
lifetable
lifetable <- read.csv("life_table4.csv")
lifetable
lifetable <- read.csv("life_table4.csv")
lifetable
lifetable
lifetable <- read.csv("life_table4.csv")
lifetable
stmat <- read.csv("stage_matrix1.csv")
stmat
stmat <- read.csv("stage_matrix1.csv")
stmat
as.matrix(stmat)
stmat <- read.csv("stage_matrix1.csv")
stmat <- as.matrix(stmat[,-1])
stmat <- read.csv("stage_matrix1.csv")
stmat <- as.matrix(stmat[,-1])
rownames(stmat) <- colnames(stmat)
stmat
lambda(stmat)
library(popbio+)
library(popbio)
lambda(stmat)
stmat <- read.csv("stage_matrix1.csv")
stmat <- as.matrix(stmat[,-1])
rownames(stmat) <- colnames(stmat)
stmat
# library(popbio)
# lambda(stmat)
hist(rpois(10000,(100*0.8)))
hist(rpois(10000,(100*0.8)),main="",xlab="Births")
hist(rbinom(10000,100,0.2),main="",xlab="Deaths")
```{r}
hist(runif(10000,0.8,1.7),main="",xlab="Per-capita birth rate")
hist(rnorm(10000,1,1,0.4),main="",xlab="Per-capita birth rate")
hist(rnorm(10000,1.1,0.4),main="",xlab="Per-capita birth rate")
install.packages("popbio")
stmat
stmat[2,2] <- 0.85
stmat[3,2] <- 0.85
stmat[3,2] <- 0
stmat
lambda(stmat)
stmat
stmat <- read.csv("stage_matrix1.csv")
stmat <- as.matrix(stmat[,-1])
rownames(stmat) <- colnames(stmat)
stmat
stmat
lambda(stmat)
stmat[3,2] <- 0.85
stmat[3,2] <- 0
stmat[2,2] <- 0.85
lambda(stmat)
stmat[1,2] <- 0.2
lambda(stmat)
stmat[1,2] <- 0.3
lambda(stmat)
stmat[1,2] <- 0.35
lambda(stmat)
stmat <- read.csv("stage_matrix1.csv")
stmat <- as.matrix(stmat[,-1])
rownames(stmat) <- colnames(stmat)
stmat
lambda(stmat)
stmat[2,2] <- 0.85
stmat[3,2] <- 0
lambda(stmat)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
rmarkdown::render('LAB4.Rmd', 'word_document')
rmarkdown::render('LAB4.Rmd', 'word_document')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
teasel <- read.csv("teaselmatrix1.csv", header=T)
teasel <- teasel[,-1]
teasel_matrix <- as.matrix(teasel)
colnames(teasel_matrix) <- names(teasel)
rownames(teasel_matrix) <- names(teasel)
teasel_matrix
teasel_matrix
library(popbio)
stable.stage(teasel_matrix)
stable.stage(teasel_matrix)*1000
round(stable.stage(teasel_matrix)*1000)
rmarkdown::render('LAB4.Rmd', 'word_document')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
rbinom(1,size=10,prob=0.5)
rbinom(1,size=10,prob=0.5)
runif(1,mean=3,sd=4.1)
rbinom(1,size=10,prob=0.5)
rpois(1,lambda=4.1)     # note: "lambda" represents the poisson mean (and variance!)
runif(1,min=1,max=3.5)
runif(1,mean=3,sd=4.1)
rnorm(1,mean=3,sd=4.1)
rlnorm(1,meanlog=0.5,sdlog=0.2)
rbeta(1,shape1=10,shape2=3)
meanlog = 1.4
stdevlog = 0.6
curve(dlnorm(x,meanlog,stdevlog),0,15,ylab="Probability (density)",xlab="Possibilities",main="Normal distribution (continuous)")   # probability density
shape1 = 10
shape2 = 4
curve(dbeta(x,shape1,shape2),0,1,ylab="Probability (density)",xlab="Possibilities",main="Beta distribution (continuous)")   # probability density
meanlog = 1.4
stdevlog = 0.6
curve(dlnorm(x,meanlog,stdevlog),0,15,ylab="Probability (density)",xlab="Possibilities",main="Lognormal distribution (continuous)")   # probability density
mean = 7.1
stdev = 1.9
curve(dnorm(x,mean,stdev),0,15,ylab="Probability (density)",xlab="Possibilities",main="Normal distribution (continuous)")   # probability density
citation("shiny")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
distribution <- c(5,3,5,4,3,6,4,5,5,1,6,5,4,3,6,6,4,2,8,4,4,5,2)
hist(distribution)  # visualize distribution
sample(distribution,1)  # take one random sample from this distribution!
sample(distribution,1)  # take one random sample from this distribution!
distribution <- c(5,3,5,4,3,6,4,5,5,1,6,5,4,3,6,6,4,2,8,4,4,5,2)
hist(distribution)  # visualize distribution
sample(distribution,1)  # take one random sample from this distribution!
rpois(100,500)
rpois(100,500)
rpois(100,500)-500
(rpois(100,500)-500)^2
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
mean((rpois(100,500)-500)^2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
hist(rpois(10000,(100*0.8)),main="",xlab="Births")
hist(rbinom(10000,100,0.2),main="",xlab="Deaths")
hist(rnorm(10000,1.1,0.4),main="",xlab="Per-capita birth rate")
hist(runif(10000,0.8,1.7),main="",xlab="Per-capita birth rate")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
rmarkdown::render('LAB5.Rmd', 'word_document')
