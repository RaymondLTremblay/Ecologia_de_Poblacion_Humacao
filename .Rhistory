is.matrix_irreducible(Lrub1)
is.matrix_primitive(Lrub1)
isergodic(Lrub1, digits=12, return.eigvec=FALSE)
is.matrix_ergodic(Lrub1, digits=12, return.eigvec=FALSE)
is.matrix_irreducible(Lrub1)
is.matrix_primitive(Lrub1)
isErgodic(Lrub1, digits=12, return.eigvec=FALSE)
is.matrix_irreducible(Lrub1)
is.matrix_primitive(Lrub1)
isErgodic(Lrub1, digits=12, return.eigvec=FALSE)
isIrreducible(Lrub1)
is.matrix_primitive(Lrub1)
isErgodic(Lrub1, digits=12, return.eigvec=FALSE)
isIrreducible(Lrub1)
isErgodic(Lrub1, digits=12, return.eigvec=FALSE)
isIrreducible(Lrub1)
isErgodic(Lrub1, digits=10, return.eigvec=FALSE)
isIrreducible(Lrub1)
isErgodic(Lrub1, digits=10, return.eigvec=FALSE)
isIrreducible(Lrub1)
pr1 <- project(Lrub1, vector=n0, time=24)
n0 <- c(48, 16, 12, 10)
pr1 <- project(Lrub1, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
eigs <- eigen(Lrub1)
lambdamax <- Re(eigs$values[1])
lambdamax
eigs
w <- abs(Re(eigs$vectors[,1]))
w
eigs <- eigen(Lrub1)
eigs
lambdamax <- Re(eigs$values[1])
lambdamax
w <- stable.stage(Lrub1)
w
install.packages(c("caret", "data.table", "desc", "emmeans", "fastICA", "fda", "fitdistrplus", "influenceR", "knitr", "libcoin", "maps", "mime", "rcmdcheck", "readr", "remotes", "robustbase", "rpf", "tidyr", "tinytex", "TMB", "visNetwork"))
knitr::opts_chunk$set(echo = TRUE)
pr1 <- project(Lrub1, vector=n0, time=24)
knitr::opts_chunk$set(echo = TRUE)
library(popdemo)
library(popbio)
R3=matrix(c(
0.43, 	0,	    0,	 0.14,
0.38,	0.84, 	0,	0,
0, 	    0,	    0.51,	0.15,
0,      0.14,    0.43, 0.84
), byrow=TRUE, ncol=4)
Lrub1=R3
isErgodic(Lrub1, digits=10, return.eigvec=FALSE)
isIrreducible(Lrub1)
n0 <- c(48, 16, 12, 10)
pr1 <- project(Lrub1, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
eigs <- eigen(Lrub1)
eigs
lambdamax <- Re(eigs$values[1])
lambdamax
w <- stable.stage(Lrub1)
w
R3=matrix(c(
0.43, 	0,	    0,	 0.14,
0.38,	0.84, 	0,	0,
0, 	    0,	    0.51,	0.15,
0,      0.14,    0.43, 0.84
), byrow=TRUE, ncol=4)
Lrub1=R3
Lrub1
R3=matrix(c(
0.43, 	0,	    0,	 0.14,
0.38,	0.84, 	0,	0,
0, 	    0,	    0.51,	0.15,
0,      0.14,    0.43, 0.84
), byrow=TRUE, ncol=4)
Lrub1=R3
Lrub1
knitr::opts_chunk$set(echo = TRUE)
n0 <- c(48, 16, 12, 10)
n0 <- c(0, 0, 100, 0)
pr1 <- project(Lrub1, vector=n0, time=24)
library(popdemo)
library(popbio)
pr1 <- project(Lrub1, vector=n0, time=24)
knitr::opts_chunk$set(echo = TRUE)
library(popdemo)
library(popbio)
R3=matrix(c(
0.43, 	0,	    0,	 0.14,
0.38,	0.84, 	0,	0,
0, 	    0,	    0.51,	0.15,
0,      0.14,    0.43, 0.84
), byrow=TRUE, ncol=4)
Lrub1=R3
Lrub1
isErgodic(Lrub1, digits=10, return.eigvec=FALSE)
isIrreducible(Lrub1)
n0 <- c(0, 0, 100, 0)
pr1 <- project(Lrub1, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
eigs <- eigen(Lrub1)
eigs
lambdamax <- Re(eigs$values[1])
lambdamax
w <- stable.stage(Lrub1)
w
n0 <- c(0, 0, 10, 0)
pr1 <- project(Lrub1, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
n0 <- c(0, 0, 2, 0)
pr1 <- project(Lrub1, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
install.packages("RevoUtilsMath")
unlink("LECTURE11_cache", recursive = TRUE)
unlink("LECTURE7_cache", recursive = TRUE)
<<<<<<< Updated upstream
=======
R.version
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#assignments <- read.csv("GroupAssignments.csv")
#knitr::kable(assignments,caption="")
#assignments <- read.csv("GroupAssignments.csv")
#knitr::kable(assignments,caption="")
assignments <- read.csv("GroupAssignments.csv")
knitr::kable(assignments,caption="")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
install.packages("mra")
install.packages(c("caret", "data.table", "libcoin", "mime", "readr", "robustbase", "rpf", "tibble", "tidyr", "TMB"))
install.packages(c("caret", "rpf", "tibble", "TMB"))
>>>>>>> Stashed changes
knitr::opts_chunk$set(echo = TRUE)
r= 7.796/5.538
r
r= (7.796-5.538)/(2021-1993)
r
r= (7.796-5.538)/(2021-1993)
r
r=ln(2)/50
r=ln(1)/50
r=log(1)/50
r=log(2)/50
r
r
e=2.71828182845904523536028747135266249
No=100
t=50
N=No*e^r*t
N
N=No*(e^(r*t))
N
r=log(2)/50
r
e=2.71828182845904523536028747135266249
No=100
t=2021-1993
N=No*(e^(r*t))
N
r=log(2)/50
r
e=2.71828182845904523536028747135266249
No=100
t=(2021-1993)
N=No*(e^(r*t))
N
r
r=log(2)/50
r
e=2.71828182845904523536028747135266249
No=100
t=50
N=No*(e^(r*t))
N
e=2.71828182845904523536028747135266249
No=5.4
t=(2021-1993)
N=No*(e^(r*t))
N
Diff=7.796-7.961
Diff
r=(3250-3000)/(2-1)
r
#dN/dt=(3250-3000)/(2-1)*Nob
dN/dt=((3250-3000)/(2-1))*Nob
Nob=3000
b=400
d=150
#dN/dt=(3250-3000)/(2-1)*Nob
dN/dt=((3250-3000)/(2-1))*Nob
#dN/dt=(3250-3000)/(2-1)*Nob
dN_dt=((3250-3000)/(2-1))*Nob
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=((3250-3000)/(2-1))*Nob
dN_1
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=(400-150)*Nob
dN_1
Nob=3000
b=400
d=150
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=(400-150)*Nob
dN_1
b=400/3000
d=150/3000
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=(400-150)*Nob
dN_1
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=(b-d)*Nob
dN_1
Nob=3000
b=400/3000
d=150/3000
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=(b-d)*Nob
dN_1
b
d
b-d
r=b-d
r
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=r*Nob
dN_1
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=r*Nob+Nob
dN_1
t=1
Nt=Nob*e^(r*t)
Nt
r
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=r*Nob+Nob
dN_1
Nt
dN_1
Nt
t=0
Nt=Nob*e^(r*t)
Nt
e=2.71828182845904523536028747135266249
Nob=3000
b=400/3000
d=150/3000
b
d
r=b-d
r
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=r*Nob+Nob
dN_1
t=0
Nt=Nob*e^(r*t)
Nt
t=1
Nt=Nob*e^(r*t)
Nt
t=2
Nt=Nob*e^(r*t)
Nt
t=3
Nt=Nob*e^(r*t)
Nt
t=4
Nt=Nob*e^(r*t)
Nt
t=5
Nt=Nob*e^(r*t)
Nt
t=6
Nt=Nob*e^(r*t)
Nt
e=2.7182818284590
Nob=3000
b=400/3000
d=150/3000
b
d
r=b-d
r
#dN/dt=(3250-3000)/(2-1)*Nob
dN_1=r*Nob+Nob
dN_1
t=0
Nt=Nob*e^(r*t)
Nt
t=1
Nt=Nob*e^(r*t)
Nt
t=2
Nt=Nob*e^(r*t)
Nt
t=3
Nt=Nob*e^(r*t)
Nt
t=4
Nt=Nob*e^(r*t)
Nt
t=5
Nt=Nob*e^(r*t)
Nt
t=6
Nt=Nob*e^(r*t)
Nt
library(tidyverse)
df=tribble(
~day, ~N
1, 100,
library(tidyverse)
df=tribble(
~day, ~N,
1, 100,
2, 158,
3, 315,
4, 298,
5, 794
)
df
ggplot(df, aes(day, N))+
geom_smooth()
ggplot(df, aes(day, N))+
geom_smooth()+
scale_x_log(base=2)
ggplot(df, aes(day, N))+
geom_point()+
scale_x_log(base=2)
ggplot(df, aes(day, N))+
geom_point()+
scale_y_log(base=2)
ggplot(df, aes(day, N))+
geom_point()+
scale_y_log(2)
ggplot(df, aes(day, N))+
geom_point()+
scale_x_log(2)
ggplot(df, aes(day, N))+
geom_point()+
scale_x_log()
library(scales)
ggplot(df, aes(day, N))+
geom_point()+
scale_x_log()
ggplot(df, aes(day, N))+
geom_point()+
scale_x_log10()
ggplot(df, aes(day, N))+
geom_point()+
scale_x_log2()
ggplot(df, aes(day, N))+
geom_point()+
scale_y_continuous(trans = log2_trans())
library(scales)
ggplot(df, aes(day, N))+
geom_point()+
scale_y_continuous(trans = log2_trans())
ggplot(df, aes(day, N))+
geom_point()+
scale_y_continuous(trans = log2_trans())+
scale_x_continuous(
trans = "log2",
labels = scales::math_format(2^.x, format = log2)
)
ggplot(df, aes(day, N))+
geom_point()+
scale_y_continuous(trans = log2_trans())+
scale_y_continuous(
trans = "log2",
labels = scales::math_format(2^.x, format = log2)
)
ggplot(df, aes(day, N))+
geom_point()+
scale_y_continuous(
trans = "log2",
labels = scales::math_format(2^.x, format = log2)
)
ggplot(df, aes(day, N))+
geom_point()+
scale_y_continuous(
trans = "log2",
labels = scales::math_format(2^.x, format = log2)
)+
geom_smooth(method=lm)
ggplot(df, aes(day, N))+
geom_point()+
scale_y_continuous(
trans = "log2",
labels = scales::math_format(2^.x, format = log2)
)+
geom_smooth(method=lm)+
ylab("Natural Log of N")
#t_double=ln(2)/r
e=2.7182818284590
r_g= 0.12
t_double=e/r
t_double
#t_double=ln(2)/r
Ng=100
e=2.7182818284590
r_g= 0.12
t_double=e/r
t_double
dN_1=r_r*Ng+Ng
dN_1
dN_1=r_g*Ng+Ng
dN_1
t=1
Nt=Nob*e^(r*t)
Nt
dN_1=r_g*Ng+Ng
dN_1
t=1
Nt=Ng*e^(r_g*t)
Nt
t=2
Nt=Ng*e^(r_g*t)
Nt
t=3
Nt=Ng*e^(r_g*t)
Nt
t=4
Nt=Ng*e^(r_g*t)
Nt
t=5
Nt=Ng*e^(r_g*t)
Nt
t=6
Nt=Ng*e^(r_g*t)
Nt
t_double=log(2)/r
t_double
dN_1=r_g*Ng+Ng
dN_1
t=6
Nt=Ng*e^(r_g*t)
Nt
t_double=log(2)/r
t_double
t_double=ln(2)/r
t_double=ln(exp(2))/r
t_double=log(2))/r
t_double=log(2)/r
t_double
dN_1=r_g*Ng+Ng
dN_1
t=6
Nt=Ng*e^(r_g*t)
Nt
t_double=log()/r
dN_1=r_g*Ng+Ng
dN_1
t=6
Nt=Ng*e^(r_g*t)
Nt
t_double=e/r
t_double
t_double=e/r
t_double
dN_1=r_g*Ng+Ng
dN_1
t=6
Nt=Ng*e^(r_g*t)
Nt
6*.12
log(2)
t_double=log(2)/r
t_double
log(2)
dN_1=r_g*Ng+Ng
dN_1
t=6
Nt=Ng*e^(r_g*t)
Nt
t_double
Nt
t_double=ln(2)/r
t_double=log(1)/r
t_double
t_double=log(2)/r
t_double
r_g= 0.012
t_double=log(2)/r
t_double
r_g= 0.12
t_double=log(2)/r_g
t_double
dN_1=r_g*Ng+Ng
dN_1
t=6
Nt=Ng*e^(r_g*t)
Nt
#t_double=ln(2)/r
Ng=100
e=2.7182818284590
r_g= 0.12
t_double=log(2)/r_g
t_double
dN_1=r_g*Ng+Ng
dN_1
t=6
Nt=Ng*e^(r_g*t)
Nt
