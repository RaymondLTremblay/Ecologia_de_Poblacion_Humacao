ggplot(aes(Year, N, color=Species)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks = seq(1982, 2000, by = 1))+
theme(axis.text.x = element_text(angle = 75, vjust = 0.5, hjust=.5))
Number_Ind
Number_Ind %>%
ggplot(aes(Year, N, color=Species)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks = seq(1982, 2000, by = 1))+
theme(axis.text.x = element_text(angle = 75, vjust = 0.5, hjust=.5))+
ylab("Cantidad de individuos en flor en cada año")
Number_Ind
Number_Ind %>%
ggplot(aes(Year, N, color=Species)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks = seq(1982, 2000, by = 1))+
theme(axis.text.x = element_text(angle = 75, vjust = 0.5, hjust=.5))+
ylab("Cantidad de individuos \n en flor en cada año")
Life_Table = tribble(
~Species, ~Treatment, ~Year_after_first_flowering, ~N, ~lx, ~bx,
"Dl", "Unscythes", 0, 142, 1.00, 1,
"Dl", "Unscythes", 1, 111, 0.78,1,
"Dl", "Unscythes",2,  94, 0.66,1,
"Dl", "Unscythes",3,  86, 0.61,1,
"Dl", "Unscythes",4,  77, 0.54,1,
"Dl", "Unscythes",5,  72, 0.51,1,
"Dl", "Unscythes",6,  70, 0.49,1,
"Dl", "Unscythes",7,  63, 0.44,.9,
"Dl", "Unscythes",8,  59, 0.42,.7,
"Dl", "Unscythes",9,  58,0.41,.5,
"Dl", "Unscythes",10, 49,0.35,.1,
)
gt(Life_Table)
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
knitr::kable(courseSchedule,caption="")
knitr::kable(courseSchedule)
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
knitr::kable(courseSchedule)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
courseSchedule <- read.csv("CourseSchedule.csv")
knitr::kable(courseSchedule)
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
library(kableExtra)
knitr::kable(courseSchedule,caption="")
library(kableExtra)
knitr::kable(courseSchedule,caption="")
knitr::kable(courseSchedule)
knitr::kbl(courseSchedule)
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
library(kableExtra)
knitr::kable(courseSchedule,caption = "")
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
courseSchedule
library(kableExtra)
knitr::kable(courseSchedule,caption = "")
knitr::kbl(courseSchedule,caption = "")
kbl(courseSchedule,caption = "")
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
library(kableExtra)
kbl(courseSchedule,caption = "")
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
library(kableExtra)
kbl(courseSchedule,caption = "")
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
library(kableExtra)
kbl(courseSchedule,caption = "")
library(kableExtra)
knitr::kbl(courseSchedule,caption = "")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript_labanswers <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- c("answer","test")
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- grepl(input, pattern = stringToFind2[1], perl = TRUE) | grepl(input, pattern = stringToFind2[2])
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
tribble(
~ Componentes, ~ Nota porcential,
tribble(
~Componentes, ~Nota porcentual,
tribble(
~Componentes, ~Nota_porcentual,
Lab exercises Vea prontuartio correspondiente,         "33%",
tribble(
~Componentes, ~Nota_porcentual,
"Lab exercises Vea prontuartio correspondiente",         "33%",
"Cuestionarios y participación",                        "10% (40 puntos)",
"Proyecto grupal de un tema" ,                           "25% (100 puntos)",
" Examen parcial n.°1 (fecha por determinar) ",           "10% (40 puntos)",
"Trabajo de PVA (fecha por determinar)"   ,              "10% (40 puntos)",
"Examen final (fecha por determinar) "   ,               "25% (100 puntos)",
)
library(tidyverse)
tribble(
~Componentes, ~Nota_porcentual,
"Lab exercises Vea prontuartio correspondiente",         "33%",
"Cuestionarios y participación",                        "10% (40 puntos)",
"Proyecto grupal de un tema" ,                           "25% (100 puntos)",
" Examen parcial n.°1 (fecha por determinar) ",           "10% (40 puntos)",
"Trabajo de PVA (fecha por determinar)"   ,              "10% (40 puntos)",
"Examen final (fecha por determinar) "   ,               "25% (100 puntos)",
)
library(tidyverse)
tribble(
~Componentes, ~Nota_porcentual,
"Lab exercises Vea prontuartio correspondiente",         "33%",
"Cuestionarios y participación",                        "10% (40 puntos)",
"Proyecto grupal de un tema" ,                           "25% (100 puntos)",
" Examen parcial n.°1 (fecha por determinar) ",           "10% (40 puntos)",
"Trabajo de PVA (fecha por determinar)"   ,              "10% (40 puntos)",
"Examen final (fecha por determinar) "   ,               "25% (100 puntos)",
)
Notas=tribble(
~Componentes, ~Nota_porcentual,
"Lab exercises Vea prontuartio correspondiente",         "33%",
"Cuestionarios y participación",                        "10% (40 puntos)",
"Proyecto grupal de un tema" ,                           "25% (100 puntos)",
" Examen parcial n.°1 (fecha por determinar) ",           "10% (40 puntos)",
"Trabajo de PVA (fecha por determinar)"   ,              "10% (40 puntos)",
"Examen final (fecha por determinar) "   ,               "25% (100 puntos)",
)
library(tidyverse)
Notas=tribble(
~Componentes, ~Nota_porcentual,
"Lab exercises Vea prontuartio correspondiente",         "33%",
"Cuestionarios y participación",                        "10% (40 puntos)",
"Proyecto grupal de un tema" ,                           "25% (100 puntos)",
" Examen parcial n.°1 (fecha por determinar) ",           "10% (40 puntos)",
"Trabajo de PVA (fecha por determinar)"   ,              "10% (40 puntos)",
"Examen final (fecha por determinar) "   ,               "25% (100 puntos)",
)
kbl(Notas)
install.packages(c("cli", "gargle", "googledrive", "isoband", "Rage", "Rcpp", "RcppArmadillo", "readr", "semTools", "stringi", "styler"))
Yes
install.packages(c("cli", "gargle", "googledrive", "isoband", "Rage", "Rcpp", "RcppArmadillo", "readr", "semTools", "stringi", "styler"))
install.packages(c("cli", "gargle", "googledrive", "isoband", "Rage", "Rcpp", "RcppArmadillo", "readr", "semTools", "stringi", "styler"))
install.packages(c("cli", "gargle", "googledrive", "isoband", "Rage", "Rcpp", "RcppArmadillo", "readr", "semTools", "stringi", "styler"))
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
R.version
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(tidyverse)
library(tidyverse)
p <- ggplot(data = data.frame(x = c(-3, 3)), aes(x))
p
p <- ggplot(data = data.frame(x = c(-3, 3)), aes(x))
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
p + stat_function(fun = scurve, n = 100)
p + stat_function(fun = scurve, n = 200)
p + stat_function(fun = scurve, n = 500)
p <- ggplot(data = data.frame(x = c(-4, 4)), aes(x))
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
p + stat_function(fun = scurve, n = 500)
p <- ggplot(data = data.frame(x = c(-4, 10)), aes(x))
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
p + stat_function(fun = scurve, n = 500)
p
N=c(1:100)
N
y <- r*N / (1 - exp(x))
damped <- function(x){
y <- r*N / (1 - exp(x))
return(y)
}
p + stat_function(fun = damped, n = 500)
N=10
N
damped <- function(x){
y <- r*N / (1 - exp(x))
return(y)
}
p + stat_function(fun = damped, n = 500)
y <- r*N* (1 - exp(x))
damped <- function(x){
y <- r*N* (1 - exp(x))
return(y)
}
p + stat_function(fun = damped, n = 500)
K=100
damped <- function(x){
y <- r*N* (1 - N(x)/K)
return(y)
}
p + stat_function(fun = damped, n = 500)
damped <- function(x){
y <- r*N* (1 - N(x-1)/K)
return(y)
}
p + stat_function(fun = damped, n = 500)
N
K=100
damped <- function(x){
y <- r*N* (1 - N(x-1)/K)
return(y)
}
p + stat_function(fun = damped, n = 500)
damped <- function(x){
y <- r*N*(1 - lag(N-10)/K)
return(y)
}
damped <- function(x){
y <- r*N*(1 - lag(N-10)/K)
return(y)
}
p + stat_function(fun = damped, n = 500)
y <- r*N*(1 - lag(N-10))
damped <- function(x){
y <- r*N*(1 - lag(N-10))
return(y)
}
p + stat_function(fun = damped, n = 500)
y <- r*N* (1 - N(x))
damped <- function(x){
y <- r*N* (1 - N(x))
return(y)
}
p + stat_function(fun = damped, n = 500)
y <- r*N* (1 - exp(x))
damped <- function(x){
y <- r*N* (1 - exp(x))
return(y)
}
p + stat_function(fun = damped, n = 500)
y <- r*N* (1 - N(x))
damped <- function(x){
y <- r*N* (1 - N(x))
return(y)
}
p + stat_function(fun = damped, n = 500)
y <- r*N* (1 - lag(N(x)))
damped <- function(x){
y <- r*N* (1 - lag(N(x)))
return(y)
}
p + stat_function(fun = damped, n = 500)
p + stat_function(fun = damped, n = 50)
p + stat_function(fun = damped, n = 50)
p <- ggplot(data = data.frame(x = c(-4, 10)), aes(x))
r=0.1
N=10
damped <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
p + stat_function(fun = damped, n = 50)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
t <- seq(1,100,1) N0 <- 100
t <- seq(1,100,1)
N0 <- 100
r <- 0.4
K <- 1000
tau <- 0
rtau <- r*tau
N <- seq(0,length(t),1) N[1]<-N0
t <- seq(1,100,1)
N0 <- 100
r <- 0.4
K <- 1000
tau <- 0
rtau <- r*tau
N <- seq(0,length(t),1)
N[1]<-N0
lambda <- exp(r)
for(ts in t){
etau <- tau
if(ts <= tau) etau <- 0
N[ts+1] <- lambda*N[ts]/(1+((N[ts-
etau]*(lambda-1))/K)) }
install.packages("stagePop")
knitr::opts_chunk$set(echo = TRUE)
library(stagepop)
library(stagePop)
runStagePopExample('BlowFlies')
runStagePopExample(VarDurEnv.R)
VarDurEnv.R
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver=’deSolve’, atol=1e-3, rtol=1e-3,
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver=deSolve, atol=1e-3, rtol=1e-3,
hbsize=1e4)
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies[’adults’,1] *
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies['adults',1] *
exp(-x$blowflies[’adults’,1]/A0)
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies['adults',1] *
exp(-x$blowflies['adults',1]/A0)
return(reprod)
},
deathFunc=function(stage,x,time,species,strain){
#per capita death rate (/d)
a=c(0.07,0.004,0.003,0.0025,0.27)
return(a[stage])
},
durationFunc=function(stage,x,time,species,strain){
#duration of each stage in days
a=c(0.6,5.0,5.9,4.1)
return(a[stage])
},
immigrationFunc=function(stage,x,time,species,strain){
v=0
if (stage==5){
if (time>=0 & time<=1){v=100}
}
return(v)
},
emigrationFunc=function(stage,x,time,species,strain){return(0)}
)
modelOutput = popModel(
numSpecies=1,
numStages=5,
ICs=list(matrix(0,nrow=5,ncol=1)),
timeVec=seq(0,200,0.5),
timeDependLoss=TRUE,
timeDependDuration=FALSE,
rateFunctions=blowFliesFunctions,
solverOptions=solver.options,
stageNames=list(c(’eggs’,’larvae’,’pupae’,’juveniles’,’adults’)),
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies['adults',1] *
exp(-x$blowflies['adults',1]/A0)
return(reprod)
},
deathFunc=function(stage,x,time,species,strain){
#per capita death rate (/d)
a=c(0.07,0.004,0.003,0.0025,0.27)
return(a[stage])
},
durationFunc=function(stage,x,time,species,strain){
#duration of each stage in days
a=c(0.6,5.0,5.9,4.1)
return(a[stage])
},
immigrationFunc=function(stage,x,time,species,strain){
v=0
if (stage==5){
if (time>=0 & time<=1){v=100}
}
return(v)
},
emigrationFunc=function(stage,x,time,species,strain){return(0)}
)
modelOutput = popModel(
numSpecies=1,
numStages=5,
ICs=list(matrix(0,nrow=5,ncol=1)),
timeVec=seq(0,200,0.5),
timeDependLoss=TRUE,
timeDependDuration=FALSE,
rateFunctions=blowFliesFunctions,
solverOptions=solver.options,
stageNames=list(c('eggs','larvae','pupae','juveniles','adults)),
speciesNames=c('blowflies'),
library(stagePop)
#All the vectors are specified in the order of the life cycle
#e.g. start with eggs and finish with reproducing adults
solver.options=list(DDEsolver='deSolve', atol=1e-3, rtol=1e-3,
hbsize=1e4)
#solver.options=list(DDEsolver=’PBS’, tol=1e-7, hbsize=1e4, dt=0.01)
blowFliesFunctions <- list(
reproFunc=function(x,time,species,strain){
A0=600
q=8.5
reprod=q*x$blowflies['adults',1] *
exp(-x$blowflies['adults',1]/A0)
return(reprod)
},
deathFunc=function(stage,x,time,species,strain){
#per capita death rate (/d)
a=c(0.07,0.004,0.003,0.0025,0.27)
return(a[stage])
},
durationFunc=function(stage,x,time,species,strain){
#duration of each stage in days
a=c(0.6,5.0,5.9,4.1)
return(a[stage])
},
immigrationFunc=function(stage,x,time,species,strain){
v=0
if (stage==5){
if (time>=0 & time<=1){v=100}
}
return(v)
},
emigrationFunc=function(stage,x,time,species,strain){return(0)}
)
modelOutput = popModel(
numSpecies=1,
numStages=5,
ICs=list(matrix(0,nrow=5,ncol=1)),
timeVec=seq(0,200,0.5),
timeDependLoss=TRUE,
timeDependDuration=FALSE,
rateFunctions=blowFliesFunctions,
solverOptions=solver.options,
stageNames=list(c('eggs','larvae','pupae','juveniles','adults')),
speciesNames=c('blowflies'),
saveFig=TRUE,
figType='eps',
figName='blowflies'
)
