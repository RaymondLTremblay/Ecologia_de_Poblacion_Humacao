S = rbind(out3,out4[1,]*NA,out4)[,-1]
U = rbind(out1,out2[1,]*NA,out2)[,-1]
ms[[i]] <- list(S=S,U=U)
}} else { # if x[1] is NA...
ms[[i]] <- list(S=matrix(NA,nrow=1,ncol=2),U=matrix(NA,nrow=1,ncol=2))
}
}
return(ms)
})
manifolds.draw=compiler::cmpfun(function(ms) {
for(i in 1:length(ms)){
S=ms[[i]]$S
U=ms[[i]]$U
title(sub="Black=stable manifold, Red=unstable manifold");
points(S[,1],S[,2],type="l",lwd=2,col="black");
points(U[,1],U[,2],type="l",lwd=2,col="red");
}
})
# Compute Jacobian of a planar vector field at a point (x,y),
# either input or chosen with locator().
jacobianAtXY <- compiler::cmpfun(function(fun,x=NULL, y=NULL,inc=1e-7){
if (is.null(x)|is.null(y)) {
x0 <- locator(n=1); x <- x0$x; y <- x0$y;
}
foo <- fun(x,y); h = inc;
foox <- fun(x+h,y); fooy <- fun(x,y+h);
A <- (foox[1] - foo[1])/h;
B <- (fooy[1] - foo[1])/h;
C <- (foox[2] - foo[2])/h;
D <- (fooy[2] - foo[2])/h;
return(matrix( c(A,B,C,D ),2,2,byrow=T))
})
##########
# Â¡Visualice el plano de fase con flechas!
##########
#######################################################################################
## SPECIFY MODEL AND INITIALIZE
#
## toggle switch function for phase arrow and nullcline plotting
toggle = compiler::cmpfun(function(u,v,parms) {
c( u*parms[1]*(1-(u+(parms[2]*v))/parms[3]), v*parms[4]*(1-(v+(parms[5]*u))/parms[6]) )
})
fun=toggle ## Our generic name for the system of equations to look at! ;-)
#
## toggle switch function for computing solution trajectories with deSolve::ode()
#Toggle = as.ode.func(toggle)
#
## parameter values?
Rmax1 <- 0.05
Alpha <- 0.3
K1 <- 1000
Rmax2 <- 0.3
Beta <- 0.2
K2 <- 450
parms=c(Rmax1,Alpha,K1,Rmax2,Beta,K2)
# toggle(100,100,parms)
xlim = c(5,2000)
ylim = c(5,1000)
new <- phasearrows.calc(toggle,xlim,ylim,resol=25,parms=parms)
plot(1,1,pch="",xlim=xlim,ylim=ylim,xlab="N1",ylab="N2")
phasearrows.draw(new)
#
## END MODEL SPECIFICATION AND INITIALIZATION
#######################################################################################
#### example with phase-plane arrows
plot(1,1,pch="",xlim=xlim,ylim=ylim,xlab="N1",ylab="N2")
phasearrows.draw(new)
abline(K1/Alpha,-(K1/Alpha)/K1,col="red",lwd=3)   # species 1
abline(K2,-K2/(K2/Beta),col="blue",lwd=3)   # species 1
##########
# Another example
##########
Rmax1 <- 0.2
Alpha <- 1.1
K1 <- 1000
Rmax2 <- 0.2
Beta <- 0.9
K2 <- 500
parms=c(Rmax1,Alpha,K1,Rmax2,Beta,K2)
# toggle(100,100,parms)
xlim = c(5,1500)
ylim = c(5,1000)
new <- phasearrows.calc(toggle,xlim,ylim,resol=25,parms=parms)
plot(1,1,pch="",xlim=xlim,ylim=ylim,xlab="N1",ylab="N2")
phasearrows.draw(new)
abline(K1/Alpha,-(K1/Alpha)/K1,col="red",lwd=3)   # species 1
abline(K2,-K2/(K2/Beta),col="blue",lwd=3)   # species 2
#########
# And another example!
#########
Rmax1 <- 0.5
Alpha <- 1.05
K1 <- 890
Rmax2 <- 0.2
Beta <- 0.5
K2 <- 890
parms=c(Rmax1,Alpha,K1,Rmax2,Beta,K2)
# toggle(100,100,parms)
xlim = c(5,1500)
ylim = c(5,1000)
new <- phasearrows.calc(toggle,xlim,ylim,resol=25,parms=parms)
plot(1,1,pch="",xlim=xlim,ylim=ylim,xlab="N1",ylab="N2")
phasearrows.draw(new)
abline(K1/Alpha,-(K1/Alpha)/K1,col="red",lwd=3)   # species 1
abline(K2,-K2/(K2/Beta),col="blue",lwd=3)   # species 2
########
# And another!
#########
Alpha <- 0.3
Beta <- 0.2
K1 <- 1000
K2 <- 450
Rmax1 <- 0.05
Rmax2 <- 0.3
Nyears <- 1000
ylim=c(0,K2*1.5)
xlim=c(0,K1*1.5)
plot(1,1,pch="",ylim=ylim,xlim=xlim,xlab="species 1",ylab="species 2")
points(jitter(System[,1],500),jitter(System[,2],500),col="brown",pch=20,cex=0.4)
points(jitter(System1[,1],500),jitter(System1[,2],500),col="green",pch=20,cex=0.4)
points(jitter(System2[,1],500),jitter(System2[,2],500),col="red",pch=20,cex=0.4)
points(jitter(System3[,1],500),jitter(System3[,2],500),col="blue",pch=20,cex=0.4)
parms=c(Rmax1,Alpha,K1,Rmax2,Beta,K2)
xlim = c(5,1500)
ylim = c(5,1000)
new <- phasearrows.calc(toggle,xlim,ylim,resol=15,parms=parms)
phasearrows.draw(new)
abline(h=K2,v=K1,col="gray",lwd=2,lty=2)
abline(K1/Alpha,-(K1/Alpha)/K1,col="red",lwd=2)   # species 1
abline(K2,-K2/(K2/Beta),col="blue",lwd=2)   # species 2
########
# And finally...
########
Rmax1 <- 0.2
Alpha <- 1.5
K1 <- 1000
Rmax2 <- 0.2
Beta <- 2
K2 <- 1500
parms=c(Rmax1,Alpha,K1,Rmax2,Beta,K2)
# toggle(100,100,parms)
xlim = c(5,1500)
ylim = c(5,1000)
new <- phasearrows.calc(toggle,xlim,ylim,resol=25,parms=parms)
plot(1,1,pch="",xlim=xlim,ylim=ylim,xlab="N1",ylab="N2")
phasearrows.draw(new)
abline(K1/Alpha,-(K1/Alpha)/K1,col="red",lwd=3)   # species 1
abline(K2,-K2/(K2/Beta),col="blue",lwd=3)   # species 2
install.packages("mra")
install.packages("popbio")
install.packages("TMB")
install.packages("popdemo")
install.packages("Rcompadre")
install.packages("Rage")
install.packages("stagePop")
knitr::opts_chunk$set(echo = TRUE)
courseSchedule <- read.csv("CourseSchedule.csv")
courseSchedule
library(kableExtra)
kbl(courseSchedule,caption = "")
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
courseSchedule
install.packages("stagePop")
R.versoion
R.version
install.packages(c("clinfun", "cpp11", "datos", "dbplyr", "DEoptimR", "digest", "downlit", "ellipse", "fs", "gargle", "gmp", "haven", "igraph", "insight", "jsonlite", "KernSmooth", "lavaan", "lme4", "Matrix", "MatrixModels", "mc2d", "mgcv", "openssl", "pkgload", "PMCMRplus", "processx", "quantmod", "quantreg", "raster", "Rcpp", "readxl", "remotes", "Rfast", "Rfast2", "rgl", "rmarkdown", "rstudioapi", "sass", "sf", "shiny", "spatial", "spData", "testthat", "usethis", "V8", "viridis", "xml2"))
install.packages("stagePop")
install.packages("Rmarkdown", dependencies = TRUE)
install.packages("quarto", dependencies = TRUE)
install.packages(c("aplot", "bookdown", "bslib", "chromote", "cpp11", "curl", "DEoptimR", "effectsize", "gert", "ggfun", "ggplot2", "ggplotify", "gifski", "gss", "HistData", "htmltools", "igraph", "leaflet.providers", "Matrix", "modeldata", "nlme", "patchwork", "PearsonDS", "promises", "purrr", "RcppArmadillo", "Rfast2", "rgl", "rmarkdown", "Rmpfr", "rsconnect", "shiny", "survival", "tinytex", "units", "webshot2", "xfun", "yulab.utils"))
install.packages(c("rgl", "rsconnect"))
knitr::opts_chunk$set(echo = TRUE)
R3=matrix(c(
0.43, 	0,	  0,    0.14,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.84
), byrow=TRUE, ncol=4)
Lrub1=R3
Lrub1
R3T=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.84
), byrow=TRUE, ncol=4)
R3T
R3F=matrix(c(
0.0, 	0,	  0,    0.00,
0.0,	0, 	0,	  0,
0, 	  0,	  0,	0,
0,    0, 0, 0
), byrow=TRUE, ncol=4)
R3T+R3F
R3T+R3F
TF=R3T+R3F
TF
R3T=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.84
), byrow=TRUE, ncol=4)
R3T
R3F=matrix(c(
0.0, 	0,	  0,    0.14,
0.0,	0, 	0,	  0,
0, 	  0,	  0,	0,
0,    0, 0, 0
), byrow=TRUE, ncol=4)
TF=R3T+R3F
TF
R3F
TF=R3T+R3F
TF
library(Rage)
library(Rage)
plot_life_cycle(Lrub1, stages=stages)
library(Rage)
stages <- c("plantulas", "juveniles", "adulto_no_reproductivos", "adultos_reproductivos")
plot_life_cycle(Lrub1, stages=stages)
isErgodic(Lrub1, digits=10, return.eigvec=FALSE)
library(popdemo)
library(popbio)
isErgodic(Lrub1, digits=10, return.eigvec=FALSE)
isIrreducible(Lrub1)
isErgodic(Lrub1, digits=10, return.eigvec=FALSE)
isIrreducible(Lrub1)
par(mar=c(10,4,1,1))
n0.amp <- c(1000,1,1,1)
n0.att <- c(1,1,1,1000)
pr2.1 <- project(Lrub1, vector=n0.amp, time=156,
standard.A=T, standard.vec=T)
pr2.2 <- project(Lrub1, vector=n0.att, time=156,
standard.A=T, standard.vec=T)
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
maxamp(Lrub1, vector=n0.amp)
n0.amp <- c(1000,1,1,1)
n0.att <- c(1,1,1,1000)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
maxamp(Lrub1, vector=n0.amp)
plot(pr2.2, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.2[51], "amplification",
adj=c(1,-0.5), cex=0.8)
maxamp(Lrub1, vector=n0.amp)
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
maxamp(Lrub1, vector=n0.att)
reactivity(Lrub1,vector=n0.att)
inertia(Lrub1,vector=n0.att)
pr1 <- project(Lrub1, vector=n0, time=24)
n0 <- c(0, 0, 2, 0)
pr1 <- project(Lrub1, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
n0 <- c(10, 10, 20, 10)
pr1 <- project(Lrub1, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
eigs <- eigen(Lrub1)
eigs
lambdamax <- Re(eigs$values[1])
lambdamax
w <- stable.stage(Lrub1)
w
pr2.2
pr2.1
n0.amp <- c(10000,1,1,1)
pr2.1 <- project(Lrub1, vector=n0.amp, time=156,
standard.A=T, standard.vec=T)
pr2.1
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
maxamp(Lrub1, vector=n0.amp)
reactivity(Lrub1,vector=n0.amp)
inertia(Lrub1,vector=n0.amp)
reactivity(Lrub1,vector=n0.amp)
reac(Lrub1,vector=n0.amp)
reac(Lrub1,vector=n0.amp, bound = "upper")
reac(Lrub1,bound = "upper")
inertia(Lrub1,bound = "lower")
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
maxamp(Lrub1, vector=n0.amp)
maxamp(Lrub1)
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
maxamp(Lrub1)
reac(Lrub1,bound = "upper")
inertia(Lrub1,bound = "lower")
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
maxamp(Lrub1)
reac(Lrub1,bound = "upper")
inertia(Lrub1,bound = "lower")
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
maxamp(Lrub1, )
reac(Lrub1,bound = "upper")
inertia(Lrub1,bound = "lower")
reac <- reactivity(Lrub1, vector=n0.amp)
maxamp <- maxamp(Lrub1, vector=n0.amp, return.t=T)
maxamp <- maxamp(Lrub1,  return.t=T)
maxamp
upinertia <- inertia(Lrub1, vector=n0.amp)
reac <- reactivity(Lrub1, vector=n0.amp)
maxamp <- maxamp(Lrub1,  return.t=T)
upinertia <- inertia(Lrub1, vector=n0.amp)
reac <- reac(Lrub1, vector=n0.amp)
reac <- reac(Lrub1, vector=n0.amp)
maxamp <- maxamp(Lrub1,  return.t=T)
upinertia <- inertia(Lrub1, vector=n0.amp)
points(c(1,maxamp$t,31), c(reac,maxamp$maxamp,upinertia),
pch=3, col="red")
par(mar=c(10,4,1,1))
points(c(1,maxamp$t,31), c(reac,maxamp$maxamp,upinertia),
pch=3, col="red")
pr2.1 <- project(Lrub1, vector=n0.amp, time=156,
standard.A=T, standard.vec=T)
pr2.2 <- project(Lrub1, vector=n0.att, time=156,
standard.A=T, standard.vec=T)
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
maxamp(Lrub1 )
reac(Lrub1,bound = "upper")
inertia(Lrub1,bound = "lower")
Elephant_age <- seq(0,60, by=2)
Elephant_age
#Birth_rate <- c(rep(0,times=7),seq(0,0.3,length=4),rep(0.3,times=15),seq(0.3,0,length=5))
Birth_rate <- c(0,0,0,0,0,0,0,
0,0.1, 0.2, 0.3,
0.3,0.3,0.3,0.3,0.3,
0.3,0.3,0.3,0.3,0.3,
0.3,0.3,0.3,0.3,0.3,
0.3, 0.225, 0.15, 0.075, 0)
names(Birth_rate) <- Elephant_age
barplot(Birth_rate,xlab="Age",ylab="b, per-capita birth rate",col="blue",ylim=c(0,0.5))
Tortoise_age <- seq(0,120,by=5)
Death_rate <- c(seq(0.7,0.05,length=5),seq(0.02,0.02,length=16),seq(0.02,0.5,length=4))
names(Death_rate) <- Tortoise_age
barplot(Death_rate,xlab="Age",ylab="d, per-capita death rate",col="blue")
library(tidyverse)
library(gt)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT %>%
gt()
R3T=matrix(c(
0.43, 	0,	  0,    0.0,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.84
), byrow=TRUE, ncol=4)
R3F=matrix(c(
0, 	0,	0, 0.14,
0,	0, 	0,0,
0,0,0,0,
0,0,0,0
), byrow=TRUE, ncol=4)
Lrub1_TF=R3T+R3F
Lrub1
Lrub1_TF
R3T=matrix(c(
0.43, 	0,	    0,    0.0,
0.38,	  0.84, 	0,	  0,
0, 	    0,	    0.51,	0.15,
0,      0.14,   0.43, 0.84
), byrow=TRUE, ncol=4)
R3F=matrix(c(
0, 	0,	0, 0.14,
0,	0, 	0,0,
0,0,0,0,
0,0,0,0
), byrow=TRUE, ncol=4)
Lrub1_TF=R3T+R3F
Lrub1_TF
library(Rage)
stages <- c("plantulas", "juveniles", "adulto_no_reproductivos", "adultos_reproductivos")
plot_life_cycle(Lrub1, stages=stages)
plot_life_cycle(Lrub1_TF, stages=stages)
matU=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.84
), byrow=TRUE, ncol=4)
matU
matF=matrix(c(
0.0, 	0,	  0,    0.14,
0.0,	0, 	0,	  0,
0, 	  0,	  0,	0,
0,    0, 0, 0
), byrow=TRUE, ncol=4)
matF
TF=matU+matF
TF
plot_life_cycle(TF, stages=stages)
library(Rage)
colnames(matA) <- c("plantulas", "juveniles", "adulto_no_reproductivos", "adultos_reproductivos")
library(Rage)
colnames(Lrub1_TF) <- c("plantulas", "juveniles", "adulto_no_reproductivos", "adultos_reproductivos")
rownames(Lrub1_TF) <- colnames(Lrub1_TF)
stages <- c("plantulas", "juveniles", "adulto_no_reproductivos", "adultos_reproductivos")
plot_life_cycle(Lrub1_TF, stages=stages)
library(Rage)
colnames(Lrub1_TF) <- c("plantulas", "juveniles", "adulto_no_reproductivos", "adultos_reproductivos")
rownames(Lrub1_TF) <- colnames(Lrub1_TF)
stages <- c(Lrub1_TF)
plot_life_cycle(Lrub1_TF, stages=stages)
plot_life_cycle(Lrub1_TF)
library(Rage)
colnames(Lrub1_TF) <- c("plantulas", "juveniles", "adulto no reproductivos", "adultos reproductivos")
rownames(Lrub1_TF) <- colnames(Lrub1_TF)
#stages <- c(Lrub1_TF)
plot_life_cycle(Lrub1_TF)
matU=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.84
), byrow=TRUE, ncol=4)
matU
matF=matrix(c(
0.0, 	0,	  0,    0.14,
0.0,	0, 	0,	  0,
0, 	  0,	  0,	0,
0,    0, 0, 0
), byrow=TRUE, ncol=4)
matF
TF=matU+matF
TF
colnames(TF) <- c("plantulas", "juveniles", "adulto no reproductivos", "adultos reproductivos")
rownames(TF) <- colnames(TF)
#stages <- c(Lrub1_TF)
plot_life_cycle(TF)
colnames(TF) <- c("1_plantulas", "2_juveniles", "3_adulto no reproductivos", "4_adultos reproductivos")
rownames(TF) <- colnames(TF)
#stages <- c(Lrub1_TF)
plot_life_cycle(TF)
orchid_names= c("1_plantulas", "2_juveniles", "3_adulto no reproductivos", "4_adultos reproductivos")
#stages <- c(Lrub1_TF)
plot_life_cycle(TF, stages = orchid_names)
remotes::install_github("jonesor/Rage")
R3T=matrix(c(
0.43, 	0,	    0,    0.0,
0.38,	  0.84, 	0,	  0,
0, 	    0,	    0.51,	0.15,
0,      0.14,   0.43, 0.84
), byrow=TRUE, ncol=4)
R3F=matrix(c(
0, 	0,	0, 0.14,
0,	0, 	0,0,
0,0,0,0,
0,0,0,0
), byrow=TRUE, ncol=4)
Lrub1_TF=R3T+R3F
Lrub1_TF
library(Rage)
colnames(Lrub1_TF) <- c("plantulas", "juveniles", "adulto no reproductivos", "adultos reproductivos")
rownames(Lrub1_TF) <- colnames(Lrub1_TF)
#stages <- c(Lrub1_TF)
plot_life_cycle(Lrub1_TF)
matU=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.84
), byrow=TRUE, ncol=4)
matU
matF=matrix(c(
0.0, 	0,	  0,    0.14,
0.0,	0, 	0,	  0,
0, 	  0,	  0,	0,
0,    0, 0, 0
), byrow=TRUE, ncol=4)
matF
TF=matU+matF
TF
colnames(TF) <- c("1_plantulas", "2_juveniles", "3_adulto no reproductivos", "4_adultos reproductivos")
rownames(TF) <- colnames(TF)
orchid_names= c("1_plantulas", "2_juveniles", "3_adulto no reproductivos", "4_adultos reproductivos")
#stages <- c(Lrub1_TF)
plot_life_cycle(TF, stages = orchid_names)
#plot_life_cycle(TF)
plot_life_cycle(TF)
orchid_names_2= c("1", "2", "3", "4")
plot_life_cycle(TF, stages = orchid_names_2)
orchid_names= order(c("1_plantulas", "2_juveniles", "3_adulto no reproductivos", "4_adultos reproductivos"))
orchid_names_2= c("1", "2", "3", "4")
#stages <- c(Lrub1_TF)
plot_life_cycle(TF, stages = orchid_names)
