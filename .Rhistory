0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.0, 0.43, 0.84
), byrow=4, ncol=4)
matU4  # ¿Cual es el problema con esa matriz?
matF4=matrix(c(
0, 	  0,	  0,    0.28,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF4
TF4=matU4+matF4
isErgodic(TF4)
plot_life_cycle(TF4)
library(Rage)
matU4=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.0, 0.43, 0.84
), byrow=4, ncol=4)
matU4  # ¿Cual es el problema con esa matriz?
matF4=matrix(c(
0, 	  0,	  0,    0.28,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF4
TF4=matU4+matF4
isIrreducible(TF4)
plot_life_cycle(TF4)
TF4
plot_life_cycle(TF4)
TF
pr1 <- project(TF4, vector=n0, time=24)
n0 <- c(10, 10, 20, 10)
pr1 <- project(TF4, vector=n0, time=24)
pr1 <- project(TF, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
eigs <- eigen(TF)
eigs
lambdamax <- Re(eigs$values[1])
lambdamax
truelambda(TF)
lambdamax
lambdamax <- Re(eigs$values[1])
lambdamax
eigs <- eigen(TF)
eigs
w <- stable.stage(TF)
w
n0 <- c(10, 10, 10, 10)
pr1 <- project(TF, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
eigs <- eigen(TF)
eigs
lambdamax <- Re(eigs$values[1]) # esta función seleciona para el primer valor
lambdamax
# Es más facil utilzar la siguiente función en el paquete popdemo
truelambda(TF)
w <- stable.stage(TF)
w
lambda(TF)
truelambda(TF)
lambda(TF)
elas(TF)
n0.amp <- c(1000,1,1,1)
n0.att <- c(1,1,1,1000)
pr2.1 <- project(TF, vector=n0.amp, time=156,
standard.A=T, standard.vec=T)
pr2.2 <- project(TF, vector=n0.att, time=156,
standard.A=T, standard.vec=T)
plot(pr2.1, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
maxamp(TF )
reac(TF,bound = "upper")
inertia(TF,bound = "lower")
plot(pr2.2, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
maxamp(TF )
reac(TF,bound = "upper")
inertia(TF,bound = "lower")
plot(pr2.2, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
maxamp(TF )
reac(TF,bound = "upper")
inertia(TF,bound = "lower")
plot(pr2.2, ylim=c(0.4,5), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.2, ylim=c(0.4,5), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.2, ylim=c(0.4,2), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.2, ylim=c(0.4,1.25), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
n0.amp <- c(1000,1,1,1)
pr2.1 <- project(TF, vector=n0.amp, time=156,
standard.A=T, standard.vec=T)
pr2.1
n0.att <- c(1000,1,1,1)
n0.amp <- c(1,1,1,1000)
pr2.1 <- project(TF, vector=n0.amp, time=156,
standard.A=T, standard.vec=T)
pr2.2 <- project(TF, vector=n0.att, time=156,
standard.A=T, standard.vec=T)
plot(pr2.2, ylim=c(0.4,1.25), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
plot(pr2.2, ylim=c(0.4,1.25), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
pr2.1amp <- project(TF, vector=n0.amp, time=156,
standard.A=T, standard.vec=T)
pr2.2att <- project(TF, vector=n0.att, time=156,
standard.A=T, standard.vec=T)
plot(pr2.2att, ylim=c(0.4,1.25), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.2att, ylim=c(0.4,1.), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.1amp, ylim=c(0.4,1), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
plot(pr2.1amp, ylim=c(0.4,1.2), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
pr2.1amp <- project(TF, vector=n0.amp, time=50,
standard.A=T, standard.vec=T)
pr2.2att <- project(TF, vector=n0.att, time=50,
standard.A=T, standard.vec=T)
plot(pr2.2att, ylim=c(0.4,1.0), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.1amp, ylim=c(0.4,1.2), log="y", cex.axis=0.8)
text(52, pr2.1[51], "amplification",
adj=c(1,-0.5), cex=0.8)
maxamp(TF )
reac(TF,bound = "upper")
inertia(TF,bound = "lower")
plot(pr2.2att, ylim=c(0.4,1.0), log="y", cex.axis=0.8)
text(52, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.1amp, ylim=c(0.4,1.2), log="y", cex.axis=0.8)
text(52, pr2.1[30], "amplification",
adj=c(1,-0.5), cex=0.8)
plot(pr2.1amp, ylim=c(0.4,1.2), log="y", cex.axis=0.8)
text(52, pr2.1[10], "amplification",
adj=c(1,-0.5), cex=0.8)
plot(pr2.1amp, ylim=c(0.4,1.2), log="y", cex.axis=0.8)
text(52, pr2.1[10], "amplification",
adj=c(1,-.25), cex=0.8)
plot(pr2.1amp, ylim=c(0.4,1.2), log="y", cex.axis=0.8)
text(30, pr2.1[10], "amplification",
adj=c(1,-.25), cex=0.8)
plot(pr2.2att, ylim=c(0.4,1.0), log="y", cex.axis=0.8)
text(30, pr2.1[51], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.2att, ylim=c(0.4,1.0), log="y", cex.axis=0.8)
text(30, pr2.1[10], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.2att, ylim=c(0.4,1.0), log="y", cex.axis=0.8)
text(30, pr2.1[10], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.1amp, ylim=c(0.4,1.2), log="y", cex.axis=0.8)
text(30, pr2.1amp[10], "amplification",
adj=c(1,-.25), cex=0.8)
plot(pr2.2att, ylim=c(0.4,1.0), log="y", cex.axis=0.8)
text(30, pr2.2att[10], "attenuation",
adj=c(1,-0.5), cex=0.8)
maxamp(TF )
reac(TF,bound = "upper")
inertia(TF,bound = "lower")
reac <- reac(TF, vector=n0.amp)
maxamp <- maxamp(TF,  return.t=T)
upinertia <- inertia(TF, vector=n0.amp)
par(mar=c(10,4,1,1))
points(c(1,maxamp$t,31), c(reac,maxamp$maxamp,upinertia),
pch=3, col="red")
par(mar=c(10,4,1,1))
points(c(1,maxamp$t,31), c(reac,maxamp$maxamp,upinertia),
pch=3, col="red")
text(1, reac, expression(bar(P)[1]),
adj=c(-0.3,0.5), col="red", cex=0.8)
text(maxamp$t, maxamp$maxamp, expression(bar(P)[max]),
adj=c(0.1,-0.5), col="red", cex=0.8)
text(31, upinertia, expression(bar(P)[infinity]),
adj=c(0.1,-0.5), col="red", cex=0.8)
maxamp$maxamp
upinertia
reac
maxamp$t
maxamp$maxamp
expression(bar(P)[max]
upinertia
par(mar=c(10,4,1,1))
points(c(1,maxamp$t,31), c(reac,maxamp$maxamp,upinertia),
pch=3, col="red")
matUCc=matrix(c(0,	0,	0,	0,
0.675,	0	,0,	0,
0,	0.75,	0	,0,
0	,0,	0.704,	0.809
), byrow=4, ncol=4)
matFCc=matrix(c(
0,	0,	0,	76.5,
0,	0,	0,	0,
0,	0,	0,	0,
0,	0,	0,	0
), byrow=4, ncol=4)
matACc=matUCc+matUCc
matACc
matUCc=matrix(c(0,	0,	0,	0,
0.675,	0	,0,	0,
0,	0.75,	0	,0,
0	,0,	0.704,	0.809
), nrow=4, ncol=4)
matFCc=matrix(c(
0,	0,	0,	76.5,
0,	0,	0,	0,
0,	0,	0,	0,
0,	0,	0,	0
), nrow=4, ncol=4)
matACc=matUCc+matUCc
matACc
matUCc=matrix(c(0,	0,	0,	0,
0.675,	0	,0,	0,
0,	0.75,	0	,0,
0	,0,	0.704,	0.809
), nrow=4, ncol=4)
matFCc=matrix(c(
0,	0,	0,	76.5,
0,	0,	0,	0,
0,	0,	0,	0,
0,	0,	0,	0
), nrow=4, ncol=4)
matACc=matUCc+matFCc
matACc
matUCc=matrix(c(
0,	0,	0,	0,
0.675,	0	,0,	0,
0,	0.75,	0	,0,
0	,0,	0.704,	0.809
), byrow=4, ncol=4)
matFCc=matrix(c(
0,	0,	0,	76.5,
0,	0,	0,	0,
0,	0,	0,	0,
0,	0,	0,	0
), byrow=4, ncol=4)
matACc=matUCc+matFCc
matACc
truelambda(matACc)
pr1 <- project(matACc, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
elas(matACc)
matUCc=matrix(c(
0,	    0,   	     0,	    0,     0,
0.675,	0.703,     0,	    0,     0,
0,	    0.047,	   0.657,  0,    0,
0	,     0,	       0.019,	0.682, 0,
0,      0,         0,     0.061, 0.8091
), byrow=4, ncol=4)
matFCc=matrix(c(
0,	0,	0,	4.665, 61,896,
0,	0,	0,	0,0,
0,	0,	0,	0,0,
0,	0,	0,	0,0,
0,0,0,0,0
), byrow=4, ncol=4)
matACc=matUCc+matFCc
matACc
matUCc=matrix(c(
0,	    0,   	     0,	    0,     0,
0.675,	0.703,     0,	    0,     0,
0,	    0.047,	   0.657,  0,    0,
0	,     0,	       0.019,	0.682, 0,
0,      0,         0,     0.061, 0.8091
), byrow=5, ncol=5)
matFCc=matrix(c(
0,	0,	0,	4.665, 61,896,
0,	0,	0,	0,0,
0,	0,	0,	0,0,
0,	0,	0,	0,0,
0,0,0,0,0
), byrow=5, ncol=5)
matACc=matUCc+matFCc
matUCc
matFCc
matFCc=matrix(c(
0,	0,	0,	4.665, 61.896,
0,	0,	0,	0,0,
0,	0,	0,	0,0,
0,	0,	0,	0,0,
0,0,0,0,0
), byrow=5, ncol=5)
matACc=matUCc+matFCc
matACc
truelambda(matACc)
elas(matACc)
pr1 <- project(matACc, vector=n0, time=24)
matACc
pr1 <- project(matACc, vector=n0, time=24)
nCc <- c(10, 10, 10, 10, 10)
pr1 <- project(matACc, vector=n0, time=24)
nCc <- c(10, 10, 10, 10, 10)
pr1 <- project(matACc, vector=nCc, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
truelambda(matACc)
elas(matACc)
library(Rage)
library(Rage)
matU=matrix(c(
0.43, 	0,	    0.00,   0.00,
0.38,	  0.84,   0.00,	  0.00,
0, 	    0.00,	  0.51,	  0.15,
0,      0.14,   0.43,   0.84),
byrow=4, ncol=4)
matU
TF=matU+matF
matF=matrix(c(
0, 	  0,	  0,    0.14,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF
TF=matU+matF
TF
colnames(TF) <- c("plantulas", "juveniles", "adulto no reproductivos", "adultos reproductivos")
rownames(TF) <- colnames(TF)
TF
TF
#stages <- c(TF_TF)
plot_life_cycle(TF)
TF
#stages <- c(TF_TF)
plot_life_cycle(TF)
TF
library(popbio)
lambda(TF)
TF
matU=matrix(c(
0.43, 	0,	    0.00,   0.00,
0.38,	  0.84,   0.00,	  0.00,
0, 	    0.00,	  0.51,	  0.15,
0,      0.14,   0.43,   0.84),
byrow=4, ncol=4)
matU
matF=matrix(c(
0, 	  0,	  0,    0.0,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF
TF=matU+matF
TF
TF
colnames(TF) <- c("plantulas", "juveniles", "adulto no reproductivos", "adultos reproductivos")
rownames(TF) <- colnames(TF)
TF
orchid_names= c("1_plantulas", "2_juveniles", "3_adulto no reproductivos", "4_adultos reproductivos")
orchid_names_2= c("1", "2", "3", "4")
#stages <- c(TF_TF)
plot_life_cycle(TF)
#plot_life_cycle(TF, stages = orchid_names_2)
```
orchid_names_2= c("1", "2", "3", "4")
#stages <- c(TF_TF)
plot_life_cycle(TF)
#plot_life_cycle(TF, stages = orchid_names_2)
```
TF
lambda(TF) # crecimiento de 3%
matU1=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.44
), byrow=4, ncol=4)
matU1
matF1=matrix(c(
0, 	  0,	  0,    0.14,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF1
TF1=matU1+matF1
TF1
lambda(TF1)
matU2=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.84
), byrow=4, ncol=4)
matU2
matF2=matrix(c(
0, 	  0,	  0,    3.6,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF2
TF2=matU2+matF2
lambda(TF2)
library(popdemo)
isErgodic(TF, digits=10, return.eigvec=FALSE)
isIrreducible(TF)
plot_life_cycle(TF)
isIrreducible(TF)
isErgodic(TF, digits=10, return.eigvec=FALSE)
isIrreducible(TF)
matU=matrix(c(
0.43, 	0,	    0.00,   0.00,
0.38,	  0.84,   0.00,	  0.00,
0, 	    0.00,	  0.51,	  0.15,
0,      0.14,   0.43,   0.84),
byrow=4, ncol=4)
matU
matF=matrix(c(
0, 	  0,	  0,    0.14,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF
TF=matU+matF
TF
library(popdemo)
isErgodic(TF, digits=10, return.eigvec=FALSE)
isIrreducible(TF)
plot_life_cycle(TF)
matU4=matrix(c(
0.43, 	0,	    0,     0.00,
0.38,	  0.84, 	0,	   0,
0.00,   0,	    0.51,	 0.15,
0,      0.0,    0.43,  0.84
), byrow=4, ncol=4)
matU4  # ¿Cual es el problema con esa matriz?
matF4=matrix(c(
0, 	  0,	  0,    0.28,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF4
TF4=matU4+matF4
plot_life_cycle(TF4)
isErgodic(TF4)
isIrreducible(TF4)
isErgodic(TF4)
isIrreducible(TF4)
pr1 <- project(TF, vector=n0, time=24)
n0 <- c(10, 10, 10, 10)
pr1 <- project(TF, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
pr1 <- project(TF, vector=n0, time=100)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
remotes::install_github("jonesor/Rage")
library(popdemo)
library(popbio)
#remotes::install_github("jonesor/Rage")
R3T=matrix(c(
0.43, 	0,	    0,    0.0,
0.38,	  0.84, 	0,	  0,
0, 	    0,	    0.51,	0.15,
0,      0.14,   0.43, 0.84
), byrow=TRUE, ncol=4)
R3F=matrix(c(
0, 	0,	0, 0.14,
0,	0, 	0,0,
0,0,0,0,
0,0,0,0
), byrow=TRUE, ncol=4)
TF_TF=R3T+R3F
TF_TF
TF=TF_TF
library(Rage)
colnames(TF_TF) <- c("plantulas", "juveniles", "adulto no reproductivos", "adultos reproductivos")
rownames(TF_TF) <- colnames(TF_TF)
#stages <- c(TF_TF)
plot_life_cycle(TF_TF)
remotes::install_github("jonesor/Rage")
remove.packages("Rage")
remotes::install_github("jonesor/Rage")
library(popdemo)
library(popbio)
remotes::install_github("jonesor/Rage")
remove.packages("Rage")
