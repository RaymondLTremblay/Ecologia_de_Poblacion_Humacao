PopArray2 <- array(0,dim=c((nyears+1),nreps))
nyears+1
nreps
rep
PopArray2[1,rep] <- Init_N     # initial abundance
PopArray2 <- array(0,dim=c((nyears+1),nreps))
## start looping through replicates
for(rep in 1:nreps){
# set initial abundance
PopArray2[1,rep] <- Init_N     # initial abundance
### loop through years
for(y in 2:(nyears+1)){
### stochasticity and d-d
nextyear <- max(0,trunc(Ricker(PopArray2[rep,y-1])))
### catastrophe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[rep,y] <- nextyear
}
}
PopArray2 <- array(0,dim=c((nyears+1),nreps))
## start looping through replicates
for(rep in 1:nreps){
# set initial abundance
PopArray2[1,rep] <- Init_N     # initial abundance
### loop through years
for(y in 2:(nyears+1)){
### stochasticity and d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catastrophe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
PopArray2
PVAdemo <- function(nreps=nreps,nyears=nyears,Init_N=Init_N,R_max=R_max,K=K,Flood_prob=Flood_prob,Flood_lambda=Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))
## start looping through replicates
for(rep in 1:nreps){
# set initial abundance
PopArray2[1,rep] <- Init_N     # initial abundance
### loop through years
for(y in 2:(nyears+1)){
### stochasticity and d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catastrophe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
## Set up data structures to store simulation results!
PVAdemo <- function(nreps=nreps,nyears=nyears,Init_N=Init_N,R_max=R_max,K=K,Flood_prob=Flood_prob,Flood_lambda=Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))
## start looping through replicates
for(rep in 1:nreps){
# set initial abundance
PopArray2[1,rep] <- Init_N     # initial abundance
### loop through years
for(y in 2:(nyears+1)){
### stochasticity and d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catastrophe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
PVAdemo
PVAdemo()
PVAdemo <- function(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))
## start looping through replicates
for(rep in 1:nreps){
# set initial abundance
PopArray2[1,rep] <- Init_N     # initial abundance
### loop through years
for(y in 2:(nyears+1)){
### stochasticity and d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catastrophe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
## Set up data structures to store simulation results!
PVAdemo <- function(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))
## start looping through replicates
for(rep in 1:nreps){
# set initial abundance
PopArray2[1,rep] <- Init_N     # initial abundance
### loop through years
for(y in 2:(nyears+1)){
### stochasticity and d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catastrophe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
### Run the PVA!
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
simdata <- Default
plot(simdata[,1],col=gray(0.4),ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
plot(simdata[,1],col=gray(0.4),ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance",type="l")
plot(simdata[,1],col=gray(0.7),ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance",type="l")
plot(c(1:100),simdata[,1],col=gray(0.7),ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance",type="l")
plot(c(1:101),simdata[,1],col=gray(0.7),ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance",type="l")
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
Flood_lambda <- 0.25    # 25% of population can survive a flood
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
PlotCloud <- function(simdata){
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
Extinctions_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))
}
Extinctions_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))
}
plot(c(1:101),Extinctions_byyear(Default),type="l",lwd=2)
Extinction_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))/ncol(simdata)
}
plot(c(1:101),Extinction_byyear(Default),type="l",lwd=2)
Extinction_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))/ncol(simdata)
}
plot(c(1:101),Extinction_byyear(Default),type="l",lwd=2)
abline(h=0.05,col="red",lwd=2)
Exctinction_risk <- function(simdata){
length(which(simdata[nrow(simdata),]==0))/ncol(simdata)
}
flood_lambdas <- seq(0.9,0.1,by=0.05)
flood_lambdas <- seq(0.9,0.1,by=-0.05)
flood_lambdas
Exctinction_risk <- function(simdata){
length(which(simdata[nrow(simdata),]==0))/ncol(simdata)
}
flood_lambdas <- seq(0.9,0.1,by=-0.05)
all_scenarios <- numeric(length(flood_lambdas))
for(scenario in 1:length(flood_lambdas)){
PVA <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,flood_lambdas[scenario])
all_scenarios[scenario] <- Exctinction_risk(PVA)
}
plot(flood_lambdas,all_scenarios,type="p",cex=2)
abline(h=0.05,col="red",lwd=2)
declines <- seq(0,1,by=0.01)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declines[s] <- length(which(simdata[nrow(simdata),]<declines[s]*Init_N))/ncol(simdata)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline magnitude","Probability")
declines
declines <- seq(0,1,by=0.01)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(simdata[nrow(simdata),]<declines[s]*Init_N))/ncol(simdata)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline magnitude","Probability")
declines
declineprob
declines <- seq(0,1,by=0.01)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(simdata[nrow(simdata),]<declines[s]*Init_N))/ncol(simdata)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline magnitude",ylab="Probability")
declines <- seq(0,1,by=0.01)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<declines[s]*Init_N))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline magnitude",ylab="Probability")
declines <- seq(0,1,by=0.01)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<declines[s]*Init_N))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline magnitude",ylab="Probability")
abline(v=0.25,col="red",lwd=2)
declines <- seq(0,1,by=0.01)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]>declines[s]*Init_N))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline magnitude",ylab="Probability")
abline(v=0.25,col="red",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]>declines[s]/100*Init_N))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline magnitude",ylab="Probability")
abline(v=0.25,col="red",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]>declines[s]/100*Init_N))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline magnitude",ylab="Probability")
abline(v=25,col="red",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]>declines[s]/100*Init_N))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline magnitude (percent)",ylab="Probability")
abline(v=25,col="red",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]>declines[s]/100*Init_N))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Abundance threshold",ylab="Probability of remaining above threshold")
abline(v=25,col="red",lwd=2)
Default[nrow(simdata),]
hist(Default[nrow(simdata),],xlab="Final abundance after 100 years",ylab="Number of replicates")
hist(Default[nrow(simdata),],xlab="Final abundance after 100 years",ylab="Number of replicates")
abline(v=Init_N,col="green",lwd=2)
hist(Default[nrow(simdata),],xlab="Final abundance after 100 years",ylab="Number of replicates",main="")
abline(v=Init_N,col="green",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<(1-declines[s]/100*Init_N)))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Abundance threshold",ylab="Probability of remaining above threshold")
abline(v=25,col="red",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<(1-declines[s]/100*Init_N)))/ncol(Default)
}
plot((1-declines[s]/100*Init_N))),declineprob,type="l",lwd=2,xlab="Abundance threshold",ylab="Probability of remaining above threshold")
declines <- seq(100,0,by=-1)
declineprob <- numeric(length(declines))
declines <- seq(Init_N,0,by=-1)
declines <- seq(Init_N,0,by=-1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<declines))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Abundance threshold",ylab="Probability of remaining above threshold")
abline(v=25,col="red",lwd=2)
declines <- seq(Init_N,0,by=-1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<declines[s]))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Abundance threshold",ylab="Probability of remaining above threshold")
abline(v=25,col="red",lwd=2)
declines
Default[nrow(simdata),]
declines
declineprob
plot(declines,declineprob,type="l",lwd=2,xlab="Abundance threshold",ylab="Probability of falling below threshold")
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<(Init_N-(declines/100)*Init_N)))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Abundance threshold",ylab="Probability of falling below threshold")
abline(v=25,col="red",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<(Init_N-(declines[s]/100)*Init_N)))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Abundance threshold",ylab="Probability of falling below threshold")
abline(v=25,col="red",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<(Init_N-(declines[s]/100)*Init_N)))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline threshold (percent)",ylab="Probability of falling below threshold")
abline(v=25,col="red",lwd=2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
####
# Basic simulation parameters
####
nyears <- 100     # number of years
nreps <- 500      # number of replicates
####
# Basic life history parameters
####
R_max <- 1.15       # Maximum rate of growth
Init_N <- 51        # Initial abundance
K <- 175            # Carrying capacity
####
# Environmental stochasticity
####
SD_lambda <- 0.11  # standard deviation of lambda
####
# Density-dependence (Ricker model)
####
Ricker <- function(prev_abund){       # this is a function for computing next-year abundance -- includes env stochasticity
prev_abund * exp(log(rnorm(1,R_max,SD_lambda))*(1-(prev_abund/K)))
}
####
# Catastrophe
####
Flood_prob <- 0.05     # 5% chance of major flood
Flood_lambda <- 0.25    # 25% of population can survive a flood
## Set up data structures to store simulation results!
PVAdemo <- function(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))
## start looping through replicates
for(rep in 1:nreps){
# set initial abundance
PopArray2[1,rep] <- Init_N     # initial abundance
### loop through years
for(y in 2:(nyears+1)){
### stochasticity and d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catastrophe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
### Run the PVA!
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
PlotCloud <- function(simdata){
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
Extinction_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))/ncol(simdata)
}
plot(c(1:101),Extinction_byyear(Default),type="l",lwd=2)
abline(h=0.05,col="red",lwd=2)
hist(Default[nrow(simdata),],xlab="Final abundance after 100 years",ylab="Number of replicates",main="")
abline(v=Init_N,col="green",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<(Init_N-(declines[s]/100)*Init_N)))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline threshold (percent)",ylab="Probability of falling below threshold")
abline(v=25,col="red",lwd=2)
Exctinction_risk <- function(simdata){
length(which(simdata[nrow(simdata),]==0))/ncol(simdata)
}
flood_lambdas <- seq(0.9,0.1,by=-0.05)
all_scenarios <- numeric(length(flood_lambdas))
for(scenario in 1:length(flood_lambdas)){
PVA <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,flood_lambdas[scenario])
all_scenarios[scenario] <- Exctinction_risk(PVA)
}
plot(flood_lambdas,all_scenarios,type="p",cex=2)
abline(h=0.05,col="red",lwd=2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
####
# Basic simulation parameters
####
nyears <- 100     # number of years
nreps <- 500      # number of replicates
####
# Basic life history parameters
####
R_max <- 1.15       # Maximum rate of growth
Init_N <- 51        # Initial abundance
K <- 175            # Carrying capacity
####
# Environmental stochasticity
####
SD_lambda <- 0.11  # standard deviation of lambda
####
# Density-dependence (Ricker model)
####
Ricker <- function(prev_abund){       # this is a function for computing next-year abundance -- includes env stochasticity
prev_abund * exp(log(rnorm(1,R_max,SD_lambda))*(1-(prev_abund/K)))
}
####
# Catastrophe
####
Flood_prob <- 0.05     # 5% chance of major flood
Flood_lambda <- 0.25    # 25% of population can survive a flood
## Set up data structures to store simulation results!
PVAdemo <- function(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))
## start looping through replicates
for(rep in 1:nreps){
# set initial abundance
PopArray2[1,rep] <- Init_N     # initial abundance
### loop through years
for(y in 2:(nyears+1)){
### stochasticity and d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catastrophe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
### Run the PVA!
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
PlotCloud <- function(simdata){
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
Extinction_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))/ncol(simdata)
}
plot(c(1:101),Extinction_byyear(Default),type="l",lwd=2)
abline(h=0.05,col="red",lwd=2)
hist(Default[nrow(simdata),],xlab="Final abundance after 100 years",ylab="Number of replicates",main="")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
####
# Basic simulation parameters
####
nyears <- 100     # number of years
nreps <- 500      # number of replicates
####
# Basic life history parameters
####
R_max <- 1.15       # Maximum rate of growth
Init_N <- 51        # Initial abundance
K <- 175            # Carrying capacity
####
# Environmental stochasticity
####
SD_lambda <- 0.11  # standard deviation of lambda
####
# Density-dependence (Ricker model)
####
Ricker <- function(prev_abund){       # this is a function for computing next-year abundance -- includes env stochasticity
prev_abund * exp(log(rnorm(1,R_max,SD_lambda))*(1-(prev_abund/K)))
}
####
# Catastrophe
####
Flood_prob <- 0.05     # 5% chance of major flood
Flood_lambda <- 0.25    # 25% of population can survive a flood
## Set up data structures to store simulation results!
PVAdemo <- function(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))
## start looping through replicates
for(rep in 1:nreps){
# set initial abundance
PopArray2[1,rep] <- Init_N     # initial abundance
### loop through years
for(y in 2:(nyears+1)){
### stochasticity and d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catastrophe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
### Run the PVA!
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
PlotCloud <- function(simdata){
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
Extinction_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))/ncol(simdata)
}
plot(c(1:101),Extinction_byyear(Default),type="l",lwd=2)
abline(h=0.05,col="red",lwd=2)
hist(Default[nrow(Default),],xlab="Final abundance after 100 years",ylab="Number of replicates",main="")
abline(v=Init_N,col="green",lwd=2)
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(simdata),]<(Init_N-(declines[s]/100)*Init_N)))/ncol(Default)
}
exp(7)
exp(4)
rlnorm(1000,4,1.5)
rmarkdown::render('LAB6.Rmd', 'word_document')
