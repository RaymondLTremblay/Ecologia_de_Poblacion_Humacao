#p <- ggplot(data = data.frame(x = c(-4, 10)), aes(x))
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
N=100
p + stat_function(fun = scurve, n = N)
stat_function
#p <- ggplot(data = data.frame(x = c(-4, 10)), aes(x))
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
N=100
p + stat_function(fun = scurve, n = N)
p <- ggplot(data = data.frame(x = c(-4, 10)), aes(x))
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
N=100
p + stat_function(fun = scurve, n = N)
p <- ggplot(data = data.frame(x = c(-3, 3)), aes(x))
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
N=101
p + stat_function(fun = scurve, n = N)
p <- ggplot(data = data.frame(x = c(-3, 3)), aes(x))
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
n=101
p + stat_function(fun = scurve, n = n)
q <- ggplot(data = data.frame(x = c(-4, 10)), aes(x))
r=0.1
N=10
damped <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
N
p <- ggplot(data = data.frame(x = c(-3, 3)), aes(x))
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
n=101
p + stat_function(fun = scurve, n = n)
stat_function(fun = damped, n = 50)
damped <- function(x){
y <- r*N*(1 - lag(N(x)))
return(y)
}
stat_function(fun = damped, n = 50)
q=stat_function(fun = damped, n = 50)
q
q+stat_function(fun = damped, n = 50)
q <- ggplot(data = data.frame(x = c(-3, 3)), aes(x))
r=0.1
N=101
damped <- function(x){
y <- r*N*(1 - lag(N(x)))
return(y)
}
q+stat_function(fun = damped, n = 50)
q+stat_function(fun = damped, n = 101)
q+stat_function(fun = damped, n = N)
q <- ggplot(data = data.frame(x = c(-3, 3)), aes(x))
r=0.1
N=101
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
damped <- function(x){
y <- r*N*(1 - lag(N(x)))
return(y)
}
q+stat_function(fun = damped, n = N)
y <- r*N*(1 - lag(N(i-x)))
damped <- function(x){
y <- r*N*(1 - lag(N(i-x)))
return(y)
}
q+stat_function(fun = damped, n = N)
f <- function(x) exp(-abs(x)) * sin(2 * pi * x)
ggplot(data.frame(x = c(-3.5, 3.5))) +
aes(x) +
stat_function(fun = f) +
ggtitle("Dampened Sine Wave")
damped(N)
damped(N=N, r=r)
damped(x, N=N, r=r)
damped(x,)
damped(x)
damped(x, N=N)
x = c(-3, 3)
r=0.1
N=101
p + stat_function(fun = function(x) exp(x)/(1+exp(x)), n = 100)
q + stat_function(fun = function(x) r*N*(1 - lag(N(x))), n = 100)
q + stat_function(fun = function(x) r*N*(1 - lag(N(x))), n = 100, r=0.1)
q + stat_function(fun = function(x) r*N*(1 - lag(x)), n = 100, r=0.1)
damped <- function(x){
y <- r*N*(1 - lag(x))
return(y)
}
q+stat_function(fun = damped, n = N)
r=0.01
N=101
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
damped <- function(x){
y <- r*N*(1 - lag(x))
return(y)
}
damped(x, N=N)
q+stat_function(fun = damped, n = N)
y <- r*N*(1 - lag(N*x))
damped <- function(x){
y <- r*N*(1 - lag(N*x))
return(y)
}
q+stat_function(fun = damped, n = N)
r=0.001
N=101
scurve <- function(x){
y <- exp(x) / (1 + exp(x))
return(y)
}
damped <- function(x){
y <- r*N*(1 - lag(N*x))
return(y)
}
q+stat_function(fun = damped, n = N)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(tidyverse)
library(gt)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT %>%
gt()
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
Elephant_age <- seq(0,60, by=2)
Elephant_age
#Birth_rate <- c(rep(0,times=7),seq(0,0.3,length=4),rep(0.3,times=15),seq(0.3,0,length=5))
Birth_rate <- c(0,0,0,0,0,0,0,
0,0.1, 0.2, 0.3,
0.3,0.3,0.3,0.3,0.3,
0.3,0.3,0.3,0.3,0.3,
0.3,0.3,0.3,0.3,0.3,
0.3, 0.225, 0.15, 0.075, 0)
names(Birth_rate) <- Elephant_age
barplot(Birth_rate,xlab="Age",ylab="b, per-capita birth rate",col="blue",ylim=c(0,0.5))
Tortoise_age <- seq(0,120,by=5)
Death_rate <- c(seq(0.7,0.05,length=5),seq(0.02,0.02,length=16),seq(0.02,0.5,length=4))
names(Death_rate) <- Tortoise_age
barplot(Death_rate,xlab="Age",ylab="d, per-capita death rate",col="blue")
lifetable <- read.csv("life_table.csv")
knitr::kable(lifetable,caption="",col.names = c("x","S(x)","b(x)","l(x)","g(x)"))
library(tidyverse)
library(gt)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT %>%
gt()
Nx = 956*.76
Nx
lx = 507/956
lx
lxbx = .76*2.0
lxbx
mx = 213/507
mx
Nx = 956*.76
Nx
lx = 507/956
lx
LT2=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, 726.6, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, .53, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT2 %>%
gt()
lxbx
LT2=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, 726.6, 0.76, 2, 1.52, 0.3, 0.7, 0.23,
2, 507, .53, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT2 %>%
gt()
Sx =507/726.6
Sx
Sx =9/213
Sx
mx = 726.6/956
mx
Sx =726.6/956
Sx
Sx =507/726
Sx
LT2=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, .76, 0.24,
1, 726.6, 0.76, 2, 1.52, 0.3, 0.7, 0.23,
2, 507, .53, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT2 %>%
gt()
Sx =507/726
Sx
lx
LT2=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, .76, 0.24,
1, 726.6, 0.76, 2, 1.52, 0.3, 0.7, 0.23,
2, 507, .53, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT2 %>%
gt()
mx=9/213
mx
LT2=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, .76, 0.24,
1, 726.6, 0.76, 2, 1.52, 0.3, 0.7, 0.23,
2, 507, .53, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, 0.04, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT2 %>%
gt()
mx
mx=213/507
mx
Ro= sum(LT2$lxbx)
R0
Ro
LT2$lx_bx_x= LT2$l_x*LT2*b_x*Age
LT2$lx_bx_x= LT2$l_x*LT2$b_x*Age
LT2$lx_bx_x= LT2$l_x*LT2$b_x*LT2$Age
LT2
G=sum(LT2$lx_bx_x)/Ro
G
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
############################################################
####                                                    ####
####  BIOL4558, T贸pico 7                               ####
####                                                    ####
####  Kevin Shoemaker                                   ####
####  University of Nevada, Reno                       ####
####        &                                          ####
####  Raymond L. Tremblay                             ####
####  Universidad de Puerto Rico                        ####
####                                                    ####
############################################################
############################################################
####  Modelos de matriz poblacional                         ####
############################################################
#########
# Teasel example from Gotelli: summarizing a complex life history!
teasel <- read.csv("teaselmatrix1.csv", header=T)      # read in the teasel transition matrix from Gotelli
teasel <- teasel[,-1]                                  # remove the row names
teasel_matrix <- as.matrix(teasel)                     # convert to a matrix (from a data frame)
colnames(teasel_matrix) <- names(teasel)               # assign row and column names
rownames(teasel_matrix) <- names(teasel)
teasel_matrix                                          # print the matrix
#############
# Summarize initial age-structured abundance as a matrix with one column
Initial_teasel <- matrix(c(1000,1500,200,300,600,25),ncol=1)         # initial population size (population vector; matrix with 1 column!)
rownames(Initial_teasel) <- rownames(teasel_matrix)                  # add row and column names
colnames(Initial_teasel) <- "Abundance"
Initial_teasel
#########
# Project the population at time 1
Year1 <- teasel_matrix %*% Initial_teasel   # note: the '%*%' denotes 'matrix multiplication' in R. We'll go through this more later.
Year1
#########
# Project the population at time 2
thisYear <- Year1
nextYear <- teasel_matrix %*% thisYear
nextYear  # now we get the (age structured) population size at time 2!
########
# Use a for loop to project the population dynamics for the next 10 years!
nYears <- 10
tenYears <- matrix(0,nrow=6,ncol=nYears+1)          # initialize storate array for recording age structured abundances for the next 10 years.
rownames(tenYears) <- rownames(Initial_teasel)      # assign row and column names
colnames(tenYears) <- seq(0,10)
tenYears[,1] <- Initial_teasel                      # initialize the simulated abundances
##########
# run the for loop!
for(t in 2:(nYears+1)){    # here we use 't' as our looping variable, but we could choose any name we want
tenYears[,t] <-  teasel_matrix %*% tenYears[,t-1]     # perform matrix multiplication for each year of the simulation!
}
tenYears
#########
# Plot the projected population trajectory over the next 10 years
plot(1,1,pch="",ylim=c(0,60000000),xlim=c(0,11),xlab="Years",ylab="Abundance",xaxt="n")    # make empty plot
cols <- rainbow(6)        # set colors for each stage
for(s in 1:6){
points(tenYears[s,],col=cols[s],type="l",lwd=2)       # plot out each stage
}
axis(1,at=seq(1,11),labels = seq(0,10))      # add x axis labels
legend("topleft",col=cols,lwd=rep(2,6),legend=rownames(tenYears))      # add legend
###########
#  Utilice la matriz de transici贸n para calcular Lambda, o la tasa finita de crecimiento de la poblaci贸n.
Lambda <- as.numeric(round(eigen(teasel_matrix)$values[1],2))
Lambda
library(popbio)      # or... it's easier to use the 'popbio' library in R!
lambda(teasel_matrix)
##########
# Calcule la distribuci贸n de edad estable a partir de la matriz de transici贸n
SAD <- abs(as.numeric(round(eigen(teasel_matrix)$vectors[,1],3)))
SAD/sum(SAD)      # stable age distribution as a percentage of the total population
library(popbio)    # ... y es a煤n m谩s f谩cil si usamos el paquete 'popbio'...
stable.stage(teasel_matrix)
###################
# Demostraci贸n en clase: convierta un modelo insightmaker en un modelo de proyecci贸n matricial
###########
# Primero, especificamos una matriz de transici贸n en blanco
TMat <- matrix(0,nrow=3,ncol=3)                    # create a blank matrix with 3 rows and 3 columns
stagenames <- c("Juveniles","Subadults","Adults")  # name the rows and columns
rownames(TMat) <- stagenames
colnames(TMat) <- stagenames
TMat                                               # now we have an all-zero transition matrix.
#####
# fill in the top left element of the matrix
TMat[1,1] <- 0
TMat
#####
# actualizar la segunda fila, primera columna
TMat[2,1] <- 0.3
TMat
#####
# y sigue llen谩ndolo...
TMat[,1] <- c(0,0.3,0)          # fill in the entire first column of the transition matrix
TMat[,2] <- c(0,0.4,0.1)        # fill in the entire second column of the transition matrix
TMat[,3] <- c(4,0,0.85)         # fill in the entire third column of the transition matrix
TMat
######
# especificar vector de abundancia inicial
InitAbund <- c(40,0,0)
names(InitAbund) <- colnames(TMat)
InitAbund
#######
# Ejecute el modelo durante 40 a帽os (usando for loop)
nYears <- 40
allYears <- matrix(0,nrow=nrow(TMat),ncol=nYears+1)
rownames(allYears) <- rownames(TMat)
colnames(allYears) <- seq(0,nYears)
allYears[,1] <- InitAbund
for(t in 2:(nYears+1)){
allYears[,t] <-  TMat %*% allYears[,t-1]
}
allYears
#####
# and plot out the results!
plot(1,1,pch="",ylim=c(0,50),xlim=c(0,nYears+1),xlab="Years",ylab="Abundance",xaxt="n")
cols <- rainbow(3)
for(s in 1:3){
points(allYears[s,],col=cols[s],type="l",lwd=2)
}
axis(1,at=seq(1,nYears+1),labels = seq(0,nYears))
legend("topleft",col=cols,lwd=rep(2,3),legend=rownames(allYears))
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
Elephant_age <- seq(0,60, by=2)
Elephant_age
#Birth_rate <- c(rep(0,times=7),seq(0,0.3,length=4),rep(0.3,times=15),seq(0.3,0,length=5))
Birth_rate <- c(0,0,0,0,0,0,0,
0,0.1, 0.2, 0.3,
0.3,0.3,0.3,0.3,0.3,
0.3,0.3,0.3,0.3,0.3,
0.3,0.3,0.3,0.3,0.3,
0.3, 0.225, 0.15, 0.075, 0)
names(Birth_rate) <- Elephant_age
barplot(Birth_rate,xlab="Age",ylab="b, per-capita birth rate",col="blue",ylim=c(0,0.5))
Tortoise_age <- seq(0,120,by=5)
Death_rate <- c(seq(0.7,0.05,length=5),seq(0.02,0.02,length=16),seq(0.02,0.5,length=4))
names(Death_rate) <- Tortoise_age
barplot(Death_rate,xlab="Age",ylab="d, per-capita death rate",col="blue")
lifetable <- read.csv("life_table.csv")
knitr::kable(lifetable,caption="",col.names = c("x","S(x)","b(x)","l(x)","g(x)"))
library(tidyverse)
library(gt)
LT=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, NA, 0.24,
1, NA, 0.76, 2, NA, 0.3, 0.7, 0.23,
2, 507, NA, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, NA, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT %>%
gt()
Ro= sum(LT2$lxbx)
library(tidyverse)
library(gt)
LT2=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, .76, 0.24,
1, 726.6, 0.76, 2, 1.52, 0.3, 0.7, 0.23,
2, 507, .53, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, 0.042, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT2 %>%
gt()
Nx = 956*.76
Nx
lx = 507/956
lx
lxbx = .76*2.0
lxbx
mx = 213/507
mx
Sx =507/726
Sx
mx=213/507
mx
Ro= sum(LT2$lxbx)
Ro
LT2=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, .76, 0.24,
1, 726.6, 0.76, 2, 1.52, 0.3, 0.7, 0.23,
2, 507, .53, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, 0.042, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT2 %>%
gt()
Sx =527/726
Sx
Sx =507/726.6
Sx
Nx = 956*.76
Nx
library(tidyverse)
library(gt)
LT2=tribble(
~Age, ~N_x, ~l_x, ~b_x, ~lxbx, ~m_x, ~S_x, ~d_x,
0, 956, 1, 0, 0, 0.24, .76, 0.24,
1, 726.6, 0.76, 2, 1.52, 0.3, 0.7, 0.23,
2, 507, .53, 3, 1.59, 0.58, 0.42, .31,
3, 213, 0.22, 1, .22, 0.042, 0.045, 0.21,
4, 9, 0.01, 0.5, 0.005, 1, 0, NA,
5, 0,0,0,0,NA, NA, NA
)
LT2 %>%
gt()
Nx = 956*.76
Nx
lx = 507/956
lx
lxbx = .76*2.0
lxbx
mx = 213/507
mx
Sx =507/726.6
Sx
mx=213/507
mx
Nx
lx = 507/956
lx
lxbx = .76*2.0
lxbx
mx = 213/507
mx
lx
Sx =726.6/956
Sx
